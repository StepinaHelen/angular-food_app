{
    "pipes": [],
    "interfaces": [
        {
            "name": "AnimateThemeChangeElements",
            "id": "interface-AnimateThemeChangeElements-4e745fc938d0af5a47e66b28a24a6b268bdd11c20634cae4d564b491ecdd95712c45787d7660b2686730de5eba74c9d3cd7431cf6381eefd07addfa3024ed4f7",
            "file": "src/app/shared/modules/header/header/header.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { LocalStorageService } from 'src/app/service/local-storage.service';\r\nimport { SidenavService } from 'src/app/service/sidenav.service';\r\nimport { ThemeService } from 'src/app/service/theme.service';\r\nimport { LocalStorageKeys } from 'src/app/service/types';\r\nimport { ITHEMES } from 'src/app/shared/types/types';\r\n\r\nexport interface AnimateThemeChangeElements {\r\n  previousElement: HTMLSpanElement;\r\n  currentElement: HTMLSpanElement;\r\n  animationLayer: HTMLDivElement;\r\n}\r\n\r\n@Component({\r\n  selector: 'food-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @ViewChild('animationLayer') animationLayer: ElementRef<HTMLDivElement>;\r\n  @ViewChild('dark') dark: ElementRef<HTMLSpanElement>;\r\n  @ViewChild('default') default: ElementRef<HTMLSpanElement>;\r\n\r\n  theme: keyof ITHEMES =\r\n    this.localStorageService.getLocalStorageItem(LocalStorageKeys.theme) ||\r\n    'default';\r\n\r\n  isDefault = this.theme === 'default';\r\n\r\n  constructor(\r\n    private themeService: ThemeService,\r\n    private localStorageService: LocalStorageService,\r\n    public sidenavService: SidenavService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.themeService.setTheme(this.theme);\r\n  }\r\n\r\n  toggleSideNav() {\r\n    this.sidenavService.toggle();\r\n  }\r\n\r\n  setThemeWithAnimation(\r\n    elements: AnimateThemeChangeElements,\r\n    themeName: keyof ITHEMES\r\n  ) {\r\n    const { previousElement, currentElement, animationLayer } = elements;\r\n\r\n    animationLayer.classList.add('animate-bg');\r\n    previousElement.classList.remove('fade-in');\r\n    previousElement.classList.add('fade-out');\r\n\r\n    setTimeout(() => {\r\n      animationLayer.classList.remove('animate-bg');\r\n      previousElement.classList.add('display-none');\r\n      currentElement.classList.add('fade-in');\r\n      currentElement.classList.remove('display-none', 'fade-out');\r\n\r\n      this.themeService.setTheme(themeName);\r\n      this.localStorageService.setLocalstorageItem(\r\n        LocalStorageKeys.theme,\r\n        themeName\r\n      );\r\n    }, 700);\r\n  }\r\n\r\n  changeTheme(themeName: keyof ITHEMES) {\r\n    this.theme = themeName;\r\n\r\n    const elements: AnimateThemeChangeElements = {\r\n      previousElement:\r\n        this.theme === 'default'\r\n          ? this.dark.nativeElement\r\n          : this.default.nativeElement,\r\n      currentElement:\r\n        this.theme === 'dark'\r\n          ? this.dark.nativeElement\r\n          : this.default.nativeElement,\r\n      animationLayer: this.animationLayer.nativeElement,\r\n    };\r\n\r\n    this.setThemeWithAnimation(elements, this.theme);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "animationLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "currentElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLSpanElement",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "previousElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLSpanElement",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CartServiceInterface",
            "id": "interface-CartServiceInterface-66ace3b7fa9401be3888aa71ce59718a12654893afb1e6207c6ba34c650a374466dd4a8a619dc5e124e104eff638c491f445f1affb2e79dcf0c53af4b3e16805",
            "file": "src/app/service/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FoodWithAmountInterface } from '../shared/types/types';\r\n\r\nexport enum LocalStorageKeys {\r\n  cart = 'cart',\r\n  category = 'category',\r\n  sort = 'sort',\r\n  theme = 'theme',\r\n  userId = 'userId',\r\n}\r\n\r\nexport interface CartServiceInterface {\r\n  items: FoodWithAmountInterface[];\r\n  total: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FoodWithAmountInterface[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FoodFilterInterface",
            "id": "interface-FoodFilterInterface-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "cursor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FoodWithAmountInterface | null",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderByDirection",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FoodInterface",
            "id": "interface-FoodInterface-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "FoodInterfaceInput"
        },
        {
            "name": "FoodInterfaceInput",
            "id": "interface-FoodInterfaceInput-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FoodWithAmountInterface",
            "id": "interface-FoodWithAmountInterface-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "FoodInterface"
        },
        {
            "name": "FormGoupInterface",
            "id": "interface-FormGoupInterface-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAddingForm",
            "id": "interface-IAddingForm-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IForm",
            "id": "interface-IForm-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFormGoupLogin",
            "id": "interface-IFormGoupLogin-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFormGoupRegister",
            "id": "interface-IFormGoupRegister-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IIcons",
            "id": "interface-IIcons-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IOrderItemsHistory",
            "id": "interface-IOrderItemsHistory-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "foods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IOrdersHistoryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IForm"
        },
        {
            "name": "IOrdersHistoryItem",
            "id": "interface-IOrdersHistoryItem-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITheme",
            "id": "interface-ITheme-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "boxShadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "mainFont",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "secondary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "secondaryFont",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "secondaryShadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "transition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "white",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITHEMES",
            "id": "interface-ITHEMES-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITheme",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITheme",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-f88cc2f58750c422c69c709d8d24cab49333b5e7fe31522906ff0b1716e11eef44d93d2c583639b54e6ee3a64b318af0c43ecda976d0b340e61575368e34358f",
            "file": "src/app/shared/types/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\n\r\nexport interface FoodInterfaceInput {\r\n  category: string;\r\n  img: string;\r\n  price: number;\r\n  title: string;\r\n}\r\n\r\nexport interface FoodInterface extends FoodInterfaceInput {\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nexport interface FoodWithAmountInterface extends FoodInterface {\r\n  amount: number;\r\n}\r\n\r\nexport interface FormGoupInterface {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  phone: FormControl<string>;\r\n  city: FormControl<string>;\r\n  street: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupLogin {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface IFormGoupRegister {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface IForm {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  city: string;\r\n  street: string;\r\n  date: string;\r\n}\r\n\r\nexport interface IAddingForm {\r\n  title: FormControl<string>;\r\n  price: FormControl<string>;\r\n  img: FormControl<string>;\r\n  category: FormControl<string>;\r\n}\r\n\r\nexport interface IOrderItemsHistory extends IForm {\r\n  foods: IOrdersHistoryItem[];\r\n}\r\n\r\nexport interface IOrdersHistoryItem {\r\n  price: number;\r\n  title: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface ITHEMES {\r\n  default: ITheme;\r\n  dark: ITheme;\r\n}\r\n\r\nexport interface ITheme {\r\n  primary: string;\r\n  secondary: string;\r\n  secondaryShadow: string;\r\n  error: string;\r\n  mainFont: string;\r\n  white: string;\r\n  secondaryFont: string;\r\n  background: string;\r\n  borderColor: string;\r\n  boxShadow: string;\r\n  transition: string;\r\n}\r\n\r\nexport interface IIcons {\r\n  name: string;\r\n  src: string;\r\n}\r\nexport interface FoodFilterInterface {\r\n  category: string;\r\n  sort: OrderByDirection;\r\n  cursor: FoodWithAmountInterface | null;\r\n}\r\n\r\nexport enum UserRole {\r\n  client = 'client',\r\n  admin = 'admin',\r\n}\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role?: UserRole;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "photoURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRole",
                    "optional": true,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthsService",
            "id": "injectable-AuthsService-08dcc01865900143a014187cb9a917c6f0e6c83008ab3ef630a4aff36b38cab2b281c3edc83492739442b242abd01c93295f78541eda25f906eb4dea6e445796",
            "file": "src/app/service/auth.service.ts",
            "properties": [
                {
                    "name": "user$",
                    "defaultValue": "this.userSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User | null>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "userSubject",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authLogin",
                    "args": [
                        {
                            "name": "provider",
                            "type": "AuthProvider",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "provider",
                            "type": "AuthProvider",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "facebookAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "githubAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "googleAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSuccessLogin",
                    "args": [
                        {
                            "name": "result",
                            "type": "firebase.auth.UserCredential",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "firebase.auth.UserCredential",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserData",
                    "args": [
                        {
                            "name": "user",
                            "type": "firebase.User | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "firebase.User | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserId",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport {\r\n  AngularFirestore,\r\n  AngularFirestoreDocument,\r\n} from '@angular/fire/compat/firestore';\r\nimport { Router } from '@angular/router';\r\nimport * as auth from 'firebase/auth';\r\nimport {\r\n  AuthProvider,\r\n  FacebookAuthProvider,\r\n  GithubAuthProvider,\r\n} from 'firebase/auth';\r\nimport firebase from 'firebase/compat/app';\r\nimport { User, UserRole } from '../shared/types/types';\r\nimport { LocalStorageService } from './local-storage.service';\r\nimport { LocalStorageKeys } from './types';\r\nimport { BehaviorSubject, Observable, of, take, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthsService {\r\n  public userSubject = new BehaviorSubject<User | null>(null);\r\n  user$: Observable<User | null> = this.userSubject.asObservable();\r\n\r\n  constructor(\r\n    private afs: AngularFirestore,\r\n    private afAuth: AngularFireAuth,\r\n    private router: Router,\r\n    private ngZone: NgZone,\r\n    private localStorageService: LocalStorageService\r\n  ) {}\r\n\r\n  handleSuccessLogin(result: firebase.auth.UserCredential) {\r\n    this.setUserId(result.user?.uid);\r\n\r\n    const user = result.user;\r\n    this.getCurrentUser(user?.uid ?? null);\r\n\r\n    this.ngZone.run(() => {\r\n      this.router.navigate(['/']);\r\n    });\r\n  }\r\n\r\n  async signIn(email: string, password: string) {\r\n    try {\r\n      const signInResult = await this.afAuth.signInWithEmailAndPassword(\r\n        email,\r\n        password\r\n      );\r\n\r\n      this.handleSuccessLogin(signInResult);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  async signUp(email: string, password: string) {\r\n    try {\r\n      const result = await this.afAuth.createUserWithEmailAndPassword(\r\n        email,\r\n        password\r\n      );\r\n\r\n      this.ngZone.run(() => {\r\n        this.router.navigate(['/']);\r\n      });\r\n\r\n      this.setUserData(result.user);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    const userId = this.localStorageService.getLocalStorageItem(\r\n      LocalStorageKeys.userId\r\n    );\r\n    return userId !== null ? true : false;\r\n  }\r\n\r\n  googleAuth() {\r\n    return this.authLogin(new auth.GoogleAuthProvider());\r\n  }\r\n\r\n  facebookAuth() {\r\n    return this.authLogin(new FacebookAuthProvider());\r\n  }\r\n\r\n  githubAuth() {\r\n    return this.authLogin(new GithubAuthProvider());\r\n  }\r\n\r\n  async authLogin(provider: AuthProvider) {\r\n    try {\r\n      const authLoginResult = await this.afAuth.signInWithPopup(provider);\r\n\r\n      this.handleSuccessLogin(authLoginResult);\r\n      this.setUserData(authLoginResult.user);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  getCurrentUser(userId: string | null) {\r\n    if (!userId) {\r\n      return of(undefined);\r\n    }\r\n\r\n    return this.afs\r\n      .doc<User>(`users/${userId}`)\r\n      .valueChanges()\r\n      .pipe(\r\n        take(1),\r\n        tap((data) => {\r\n          this.userSubject.next(data ?? null);\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  setUserData(user: firebase.User | null) {\r\n    if (!user) {\r\n      return;\r\n    }\r\n\r\n    const userRef: AngularFirestoreDocument<User> = this.afs.doc(\r\n      `users/${user.uid}`\r\n    );\r\n\r\n    const userData: User = {\r\n      uid: user.uid,\r\n      email: user.email ?? '',\r\n      displayName: user.displayName ?? '',\r\n      photoURL: user.photoURL ?? '',\r\n      role: UserRole.client,\r\n    };\r\n\r\n    return userRef.set(userData, {\r\n      merge: true,\r\n    });\r\n  }\r\n\r\n  async signOut() {\r\n    try {\r\n      await this.afAuth.signOut();\r\n      this.setUserId(null);\r\n      this.userSubject.next(null);\r\n      this.router.navigate(['login']);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        window.alert(error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setUserId(userId: string | null | undefined) {\r\n    if (userId) {\r\n      this.localStorageService.setLocalstorageItem(\r\n        LocalStorageKeys.userId,\r\n        userId\r\n      );\r\n    } else {\r\n      localStorage.clear();\r\n    }\r\n  }\r\n\r\n  get userId() {\r\n    return this.localStorageService.getLocalStorageItem<string>(\r\n      LocalStorageKeys.userId\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isLoggedIn": {
                    "name": "isLoggedIn",
                    "getSignature": {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 80
                    }
                },
                "userId": {
                    "name": "userId",
                    "getSignature": {
                        "name": "userId",
                        "type": "",
                        "returnType": "",
                        "line": 175
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CartService",
            "id": "injectable-CartService-3f43adc87076392f07f34058ef351570abe58e3b6fac5dcb040fc1e355b49b0ab0bb84bcaefbade56540d686c51c1720d305a0ce2d5f5f66fb97f6a6abb32198",
            "file": "src/app/service/cart.service.ts",
            "properties": [
                {
                    "name": "cart$",
                    "defaultValue": "this.subject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CartServiceInterface>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<CartServiceInterface>(\r\n    this.localStorageService.getLocalStorageItem(LocalStorageKeys.cart) ?? {\r\n      items: [],\r\n      total: 0,\r\n    }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "cartItem",
                            "type": "FoodWithAmountInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cartItem",
                            "type": "FoodWithAmountInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCartData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CartServiceInterface>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCartItemAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFromCart",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, map, Observable } from 'rxjs';\r\nimport { calculateTotal } from '../shared/helpers/cart.helpers';\r\nimport { FoodWithAmountInterface } from '../shared/types/types';\r\nimport { LocalStorageService } from './local-storage.service';\r\nimport { CartServiceInterface, LocalStorageKeys } from './types';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartService {\r\n  public subject = new BehaviorSubject<CartServiceInterface>(\r\n    this.localStorageService.getLocalStorageItem(LocalStorageKeys.cart) ?? {\r\n      items: [],\r\n      total: 0,\r\n    }\r\n  );\r\n\r\n  constructor(private localStorageService: LocalStorageService) {}\r\n\r\n  cart$: Observable<CartServiceInterface> = this.subject.asObservable();\r\n\r\n  addToCart(cartItem: FoodWithAmountInterface): void {\r\n    const cart = this.subject.getValue();\r\n    const index = cart.items.findIndex(({ id }) => id === cartItem.id);\r\n\r\n    if (index !== -1) {\r\n      const newItems: FoodWithAmountInterface[] = cart.items.slice(0);\r\n\r\n      newItems[index].amount += cartItem.amount;\r\n\r\n      const total = calculateTotal(newItems);\r\n      const nextData = { items: newItems, total };\r\n\r\n      this.localStorageService.setLocalstorageItem(\r\n        LocalStorageKeys.cart,\r\n        nextData\r\n      );\r\n\r\n      this.subject.next(nextData);\r\n\r\n      return;\r\n    }\r\n\r\n    const items = [...cart.items, cartItem];\r\n    const total = calculateTotal(items);\r\n    const nextData = { items, total };\r\n\r\n    this.localStorageService.setLocalstorageItem(\r\n      LocalStorageKeys.cart,\r\n      nextData\r\n    );\r\n\r\n    this.subject.next({ items, total });\r\n  }\r\n\r\n  removeFromCart(itemId: string): void {\r\n    const cartItems = this.subject.getValue();\r\n    const filtered = cartItems.items.filter((item) => item.id !== itemId);\r\n    const total = calculateTotal(filtered);\r\n    const nextData = { items: filtered, total };\r\n\r\n    this.localStorageService.setLocalstorageItem(\r\n      LocalStorageKeys.cart,\r\n      nextData\r\n    );\r\n\r\n    this.subject.next(nextData);\r\n  }\r\n\r\n  clearCart(): void {\r\n    const initalData = { items: [], total: 0 };\r\n\r\n    this.localStorageService.setLocalstorageItem(\r\n      LocalStorageKeys.cart,\r\n      initalData\r\n    );\r\n\r\n    this.subject.next(initalData);\r\n  }\r\n\r\n  getCartData(): Observable<CartServiceInterface> {\r\n    return this.cart$;\r\n  }\r\n\r\n  getCartItemAmount(): Observable<number> {\r\n    return this.cart$.pipe(\r\n      map((cart) =>\r\n        cart.items.reduce((acc, item) => (acc += item.amount ?? 0), 0)\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FoodServiceService",
            "id": "injectable-FoodServiceService-901826409c4501450aa85209e633e79020c5fe9f1d492cc648e3e78327b29827dab6249576c5b89a697f4bfe3a29d04ed41384ef231846223df0b706f339d786",
            "file": "src/app/service/food-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addFood",
                    "args": [
                        {
                            "name": "food",
                            "type": "FoodInterfaceInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "food",
                            "type": "FoodInterfaceInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "categorize",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ref",
                            "type": "Query",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ref",
                            "type": "Query",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFoodItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFoodItemById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFoodsList",
                    "args": [
                        {
                            "name": "fieldCategory",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "FoodWithAmountInterface | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FoodWithAmountInterface[]>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldCategory",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "order",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "FoodWithAmountInterface | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderBy",
                    "args": [
                        {
                            "name": "order",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ref",
                            "type": "Query",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "order",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ref",
                            "type": "Query",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paginate",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "FoodWithAmountInterface | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ref",
                            "type": "Query",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "FoodWithAmountInterface | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ref",
                            "type": "Query",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFoodItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "FoodInterfaceInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "FoodInterfaceInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AngularFirestore, Query } from '@angular/fire/compat/firestore';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SpinnerService } from 'src/app/service/spinner.service';\r\nimport { DEFAULT_FETCH_LIMIT } from '../shared/constants';\r\nimport {\r\n  FoodWithAmountInterface,\r\n  FoodInterfaceInput,\r\n} from '../shared/types/types';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FoodServiceService {\r\n  constructor(\r\n    private afs: AngularFirestore,\r\n    private spinnerService: SpinnerService\r\n  ) {}\r\n\r\n  private orderBy(order: OrderByDirection, ref: Query) {\r\n    return ref.orderBy('title', order);\r\n  }\r\n\r\n  private categorize(category: string, ref: Query) {\r\n    if (category === 'all') {\r\n      return ref;\r\n    }\r\n    return ref.where('category', '==', category);\r\n  }\r\n\r\n  private paginate(\r\n    limit: number,\r\n    item: FoodWithAmountInterface | null,\r\n    ref: Query\r\n  ) {\r\n    if (item) {\r\n      return ref.startAfter(item.title).limit(limit);\r\n    }\r\n    return ref.limit(limit);\r\n  }\r\n\r\n  getFoodsList(\r\n    fieldCategory: string,\r\n    order: OrderByDirection,\r\n    item: FoodWithAmountInterface | null\r\n  ): Observable<FoodWithAmountInterface[]> {\r\n    this.spinnerService.loadingOn();\r\n    const listCollection = this.afs.collection<FoodWithAmountInterface>(\r\n      'foods',\r\n      (ref) => {\r\n        const categorizedRef = this.categorize(fieldCategory, ref);\r\n        const orderedRef = this.orderBy(order, categorizedRef);\r\n        const paginatedRef = this.paginate(25, item, orderedRef);\r\n\r\n        return paginatedRef;\r\n      }\r\n    );\r\n\r\n    return listCollection.snapshotChanges().pipe(\r\n      map((dataRes) => {\r\n        return dataRes.map((list) => ({\r\n          ...list.payload.doc.data(),\r\n          id: list.payload.doc.id,\r\n          type: list.type,\r\n          amount: 1,\r\n        }));\r\n      }),\r\n      tap(() => {\r\n        this.spinnerService.loadingOff();\r\n      })\r\n    );\r\n  }\r\n\r\n  addFood(food: FoodInterfaceInput): void {\r\n    this.afs.collection('foods').add(food);\r\n  }\r\n\r\n  deleteFoodItem(id: string) {\r\n    this.afs.doc('foods/' + id).delete();\r\n  }\r\n\r\n  updateFoodItem(id: string, data: FoodInterfaceInput) {\r\n    this.afs.doc('foods/' + id).update(data);\r\n  }\r\n\r\n  getFoodItemById(id: string) {\r\n    return this.afs\r\n      .collection('foods')\r\n      .doc(id)\r\n      .snapshotChanges()\r\n      .pipe(\r\n        map((item) => {\r\n          return {\r\n            ...(item.payload.data() as FoodInterfaceInput),\r\n            id: item.payload.id,\r\n            amount: 1,\r\n          };\r\n        })\r\n      );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-292edf7dda909ce1d3334f2849a45583f71a1f4dd7dddec37689eecaff164365be69759f4ccad129d99ec7ae9db9131ba030900a32deabed40b86d4b1ec28af3",
            "file": "src/app/service/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLocalStorageItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "LocalStorageKeys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "R | null",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "LocalStorageKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLocalstorageItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "LocalStorageKeys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "LocalStorageKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { LocalStorageKeys } from './types';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LocalStorageService {\r\n  constructor() {}\r\n\r\n  setLocalstorageItem<T>(key: LocalStorageKeys, data: T): void {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(data));\r\n    } catch (e) {\r\n      console.log('Error saving to LocalStorage');\r\n    }\r\n  }\r\n\r\n  getLocalStorageItem<R>(key: LocalStorageKeys): R | null {\r\n    try {\r\n      const data = localStorage.getItem(key);\r\n      if (data) {\r\n        return JSON.parse(data);\r\n      }\r\n      return null;\r\n    } catch {\r\n      console.log('Error getting data from LocalStorage');\r\n      return null;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "OrderHistoryService",
            "id": "injectable-OrderHistoryService-e1f75e7fec24481c789df4a44c457023811837e64237f88ae5b22d81912b114c1608b89007793df6a0aa469cb67dfd95192270a836484ecc978ad6800baa2eec",
            "file": "src/app/service/order-history-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addOrderItemToHistory",
                    "args": [
                        {
                            "name": "orders",
                            "type": "IOrderItemsHistory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orders",
                            "type": "IOrderItemsHistory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHistoryOrderItem",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IOrderItemsHistory[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\nimport { Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { IOrderItemsHistory } from '../shared/types/types';\r\nimport { SpinnerService } from './spinner.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OrderHistoryService {\r\n  constructor(\r\n    private afs: AngularFirestore,\r\n    private spinnerService: SpinnerService\r\n  ) {}\r\n\r\n  addOrderItemToHistory(orders: IOrderItemsHistory, userId: string | null) {\r\n    let userRef = null;\r\n\r\n    if (userId) {\r\n      userRef = this.afs.collection('users').doc(userId).ref;\r\n    }\r\n\r\n    return this.afs\r\n      .collection('ordersHistory')\r\n      .add(userRef ? { ...orders, clientId: userRef } : orders);\r\n  }\r\n\r\n  getHistoryOrderItem(userId: string): Observable<IOrderItemsHistory[]> {\r\n    this.spinnerService.loadingOn();\r\n\r\n    const userRef = this.afs.collection('users').doc(userId).ref;\r\n    const listCollection = this.afs.collection<IOrderItemsHistory>(\r\n      'ordersHistory',\r\n      (ref) => {\r\n        return ref.where('clientId', '==', userRef);\r\n      }\r\n    );\r\n\r\n    return listCollection.valueChanges().pipe(\r\n      map((data) => {\r\n        return data;\r\n      }),\r\n      tap(() => {\r\n        this.spinnerService.loadingOff();\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SidenavService",
            "id": "injectable-SidenavService-db7e9e5dfbdca0986afdffb1c0797c5f04f4beba16d1c9b4c3c79a4c9298ae4f7f47a182ac440cd5b7f6d0dea7bdf575837ddd27707a7560ed826e27c9be4f88",
            "file": "src/app/service/sidenav.service.ts",
            "properties": [
                {
                    "name": "sidenav$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SidenavService {\r\n  public sidenav$ = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor() {}\r\n\r\n  toggle() {\r\n    this.sidenav$.next(true);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "SpinnerService",
            "id": "injectable-SpinnerService-fea86ff22b11317c4e75f69ae3d6f97573d1381be79e2a7f83c6b99bf2383722fbd988c157fdd9d3316b53948fe42cb399075632a7d3cbc81cc2ffd9663ee7b1",
            "file": "src/app/service/spinner.service.ts",
            "properties": [
                {
                    "name": "spinner$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "loadingOff",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadingOn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SpinnerService {\r\n  public spinner$ = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor() {}\r\n\r\n  loadingOn() {\r\n    this.spinner$.next(true);\r\n  }\r\n\r\n  loadingOff() {\r\n    this.spinner$.next(false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-a972b63dbfe46e015beea6325db717b4c2a1ecb1193155a426b386754994da345b98c3f229b4a82442890e70587e2d8de5abd4a3d823767b2feccf4f7d20615c",
            "file": "src/app/service/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'default'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'default'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { THEMES } from '../shared/config/theme.config';\r\nimport { ITheme, ITHEMES } from '../shared/types/types';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ThemeService {\r\n  constructor(@Inject(DOCUMENT) private document: Document) {}\r\n\r\n  setTheme(name: keyof ITHEMES = 'default') {\r\n    const theme: ITheme = THEMES[name];\r\n    (Object.keys(theme) as Array<keyof ITheme>).forEach((key) => {\r\n      this.document.documentElement.style.setProperty(`--${key}`, theme[key]);\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AdminGuard",
            "id": "injectable-AdminGuard-40de6de4470997c7e741b1ddef3f2ce382ec865f8d75a39f16601c9888a8b0c5d2f0f7acc217dc278731660d14d23a1c40b545363be9dbecb580cacfcadf09bb",
            "file": "src/app/shared/guards/admin.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthsService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthsService } from '../../service/auth.service';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(public authService: AuthsService) {}\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    if (this.authService.userSubject?.value?.role === 'admin') {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-ef99677b077c5a0effe1efb94c2c9da8c5352abdff2872e30efef46708eac3e75cd2f688ae6338ec8f1dbe12a2287c9623cdbd15f1bbb11d67023830ebdb65cf",
            "file": "src/app/shared/guards/auth.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthsService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router,\r\n} from '@angular/router';\r\nimport { AuthsService } from '../../service/auth.service';\r\nimport { Observable } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(public authService: AuthsService, public router: Router) {}\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    if (this.authService.isLoggedIn !== true) {\r\n      this.router.navigate(['sign-up']);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-9b577d1046abbc5d7dbcbb752476f0c9bdcda348f4d6b3dc45e6d278c9f6ed0c71bd0a917c04612c036715a7e713cdaf76f96b7fb15c14b17715cfd35b0bbf01",
            "file": "src/app/shared/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { catchError, Observable, throwError } from 'rxjs';\r\n\r\nimport { Router } from '@angular/router';\r\nimport { AuthsService } from 'src/app/service/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authsService: AuthsService, private router: Router) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const req = request.clone({\r\n      setParams: {\r\n        auth: `${this.authsService.userId}`,\r\n      },\r\n    });\r\n\r\n    return next.handle(req).pipe(\r\n      catchError((err) => {\r\n        if (err.status === 401) {\r\n          this.authsService.signOut();\r\n          this.router.navigate(['/login']);\r\n        }\r\n        return throwError(() => err);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "CustomValidators",
            "id": "class-CustomValidators-c16ec69aef421b280c793407a26ddfff0f8f5b6431d39017489a2a590eb04c19a1770efe84f97ee1ec8165a387b65c0e26fcc09abd0f7a180f1b4076a5f51bab",
            "file": "src/app/shared/validators/custom-validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  AbstractControl,\r\n  ValidatorFn,\r\n  ValidationErrors,\r\n  AsyncValidatorFn,\r\n} from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n  static compareWith(controlNameForCompare: string): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (!control.value) {\r\n        return null;\r\n      }\r\n\r\n      const controlToCompare = control.root.get(controlNameForCompare);\r\n\r\n      return controlToCompare && controlToCompare.value !== control.value\r\n        ? {\r\n            match: true,\r\n          }\r\n        : null;\r\n    };\r\n  }\r\n\r\n  static imageUrl(): AsyncValidatorFn {\r\n    return (control: AbstractControl): Promise<ValidationErrors | null> => {\r\n      return new Promise<{ imgUrl: boolean } | null>(function (resolve) {\r\n        let timer: NodeJS.Timeout;\r\n        let timeout = 1000;\r\n        let img = new Image();\r\n\r\n        img.onerror = img.onabort = function () {\r\n          clearTimeout(timer);\r\n          resolve({ imgUrl: true });\r\n        };\r\n        img.onload = function () {\r\n          clearTimeout(timer);\r\n          resolve(null);\r\n        };\r\n        timer = setTimeout(function () {\r\n          img.src = '//!!!!/test.jpg';\r\n          resolve({ imgUrl: true });\r\n        }, timeout);\r\n        img.src = control.value;\r\n      });\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "compareWith",
                    "args": [
                        {
                            "name": "controlNameForCompare",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlNameForCompare",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imageUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "AsyncValidatorFn",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "OutsideClickDirective",
            "id": "directive-OutsideClickDirective-3c8f543499317b56655b2600a82aa964908b337027fa17b4c12bbfed9d7e3fcd3eca95f073207ffa1df267a6c52851f3b5e01a014166708004d977c84f64faba",
            "file": "src/app/shared/directives/click-outside.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Optional,\r\n  Inject,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[outsideClick]',\r\n})\r\nexport class OutsideClickDirective implements OnInit, OnDestroy {\r\n  @Output('outsideClick') outsideClick = new EventEmitter<MouseEvent>();\r\n\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private element: ElementRef,\r\n    @Optional() @Inject(DOCUMENT) private document: Document\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    setTimeout(() => {\r\n      this.subscription = fromEvent<MouseEvent>(this.document, 'click')\r\n        .pipe(\r\n          filter((event) => {\r\n            const clickTarget = event.target as HTMLElement;\r\n            return (\r\n              !clickTarget.hasAttribute('exclude') &&\r\n              !this.isOrContainsClickTarget(\r\n                this.element.nativeElement,\r\n                clickTarget\r\n              )\r\n            );\r\n          })\r\n        )\r\n        .subscribe(() => this.outsideClick.emit());\r\n    }, 0);\r\n  }\r\n\r\n  private isOrContainsClickTarget(\r\n    element: HTMLElement,\r\n    clickTarget: HTMLElement\r\n  ) {\r\n    return element == clickTarget || element.contains(clickTarget);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[outsideClick]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "outsideClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isOrContainsClickTarget",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clickTarget",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clickTarget",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AdminLinksComponent",
            "id": "component-AdminLinksComponent-e4a6eeae386893d0716146e5c574867b01c0b0796ec12e6a2050a84d6bfdd2082be05c1d2797e0298044c810ee323c8aae3658f74e2873115577914bc0f4a853",
            "file": "src/app/shared/modules/sidenav/admin-links/admin-links.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-admin-links",
            "styleUrls": [
                "./admin-links.component.scss",
                "../link.styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-links.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navLinks",
                    "defaultValue": "navLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { navLinks } from 'src/app/shared/constants';\r\n\r\n@Component({\r\n  selector: 'food-admin-links',\r\n  templateUrl: './admin-links.component.html',\r\n  styleUrls: ['./admin-links.component.scss', '../link.styles.scss'],\r\n})\r\nexport class AdminLinksComponent {\r\n  navLinks = navLinks;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./admin-links.component.scss"
                },
                {
                    "data": "span {\r\n  color: var(--mainFont);\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n\r\n  @media screen and (min-width: 480px) {\r\n    font-size: 32px;\r\n  }\r\n}\r\n\r\n.cart-amount {\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: var(--primary);\r\n  border-radius: 50%;\r\n  color: var(--white);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  position: absolute;\r\n  left: 20px;\r\n  bottom: 25px;\r\n}\r\n\r\n.link {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: var(--mainFont);\r\n  gap: 8px;\r\n\r\n  > p {\r\n    flex-basis: 3.5rem;\r\n  }\r\n\r\n  &:hover {\r\n    > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n    .shopping-cart-container > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n  }\r\n}\r\n\r\n.link-active {\r\n  > span,\r\n  p {\r\n    color: var(--secondary);\r\n    transition: var(--transition);\r\n  }\r\n}\r\n",
                    "styleUrl": "../link.styles.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<li>\r\n  <a\r\n    class=\"link\"\r\n    [routerLink]=\"navLinks.admin.orderHistory\"\r\n    [routerLinkActive]=\"['link-active']\"\r\n  >\r\n    <p>Orders</p>\r\n    <span class=\"material-symbols-outlined\">receipt_long</span>\r\n  </a>\r\n</li>\r\n<li>\r\n  <a\r\n    class=\"link\"\r\n    [routerLink]=\"navLinks.admin.dashboard\"\r\n    [routerLinkActive]=\"['link-active']\"\r\n  >\r\n    <p>Dashboard</p>\r\n    <span class=\"material-symbols-outlined\">dashboard</span>\r\n  </a>\r\n</li>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-04d7c214c13e2a053726cb1530982793a49c84521cd5140d0ebeea55dc9496b5888a340f22ff6c99fd0e01ef63d47ad0acc8c679542a9754a33f890105b98cde",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthsService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconsSvg",
                    "defaultValue": "icons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcons[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "title",
                    "defaultValue": "'angular-food_app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerIcons",
                    "args": [
                        {
                            "name": "icons",
                            "type": "IIcons[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "icons",
                            "type": "IIcons[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { AuthsService } from './service/auth.service';\r\nimport { icons } from './shared/constants';\r\nimport { IIcons } from './shared/types/types';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor(\r\n    private matIconRegistry: MatIconRegistry,\r\n    private domSanitizer: DomSanitizer,\r\n    public authsService: AuthsService\r\n  ) {}\r\n  title = 'angular-food_app';\r\n  iconsSvg: IIcons[] = icons;\r\n\r\n  ngOnInit() {\r\n    this.registerIcons(this.iconsSvg);\r\n    this.authsService.getCurrentUser(this.authsService.userId);\r\n  }\r\n\r\n  registerIcons(icons: IIcons[]) {\r\n    icons.forEach((icon) => {\r\n      this.matIconRegistry.addSvgIcon(\r\n        icon.name,\r\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.src)\r\n      );\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page {\r\n  height: 100%;\r\n  width: 100%;\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.page-content {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: auto;\r\n  position: relative;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"page\">\r\n  <food-header></food-header>\r\n  <div id=\"scrollable\" #scroll class=\"page-content\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n  <food-footer></food-footer>\r\n</div>\r\n<food-sidenav></food-sidenav>\r\n<spinner></spinner>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3abe72c91a06e3ca3f957f4bf8ad6e1823cb9fca35bd4975cab1a97879a86fd723eaab7ff044c9e8d4666734c7b7bcbb54ec1300a7514ff38e4643653a758771",
            "file": "src/app/shared/modules/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SpinnerService"
                }
            ],
            "selector": "food-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { SpinnerService } from 'src/app/service/spinner.service';\r\n\r\n@Component({\r\n  selector: 'food-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n  providers: [SpinnerService],\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  @Input()\r\n  isDisabled: boolean;\r\n\r\n  @Input()\r\n  disabled: boolean;\r\n\r\n  @Input()\r\n  buttonText: string = '';\r\n\r\n  @Input()\r\n  className: string = '';\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\r\n  &.login {\r\n    padding: 9px 51px;\r\n  }\r\n  &.addProduct {\r\n    margin-left: auto;\r\n    margin-top: 30px;\r\n    display: flex;\r\n  }\r\n  &.modalBtn {\r\n    margin-left: auto;\r\n    margin-top: 50px;\r\n    display: flex;\r\n    padding: 10px 27px;\r\n  }\r\n  &:disabled {\r\n    opacity: 0.7;\r\n  }\r\n\r\n  &.categories {\r\n    margin-bottom: 12px;\r\n    padding: 4px 12px;\r\n    margin-right: 12px;\r\n  }\r\n\r\n  &.cardItem {\r\n    padding: 5px 27px;\r\n  }\r\n\r\n  &.goToOrder {\r\n    padding: 13px 54px;\r\n    font-weight: 600;\r\n  }\r\n\r\n  &.order {\r\n    padding: 9px 70px;\r\n    font-size: 32px;\r\n    line-height: 38px;\r\n    margin-bottom: 40px;\r\n  }\r\n  &.auth {\r\n    padding: 13px 40px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\r\n  pButton\r\n  type=\"button\"\r\n  [class]=\"'p-button-secondary' + ' ' + className\"\r\n  data-testid=\"food-button\"\r\n  [disabled]=\"isDisabled || disabled\"\r\n  [label]=\"buttonText\"\r\n  [loading]=\"isDisabled\"\r\n  iconPos=\"right\"\r\n></button>\r\n"
        },
        {
            "name": "ButtonSpinnerComponent",
            "id": "component-ButtonSpinnerComponent-13d6172877cf47639ce2c2660fed3599b8c9f020ea1bee3c1bf1972aaef62b23b7adf9b4bebea941a761ba8ee5c5c651b2f12d050aa4b8eecd3af3a8fc852af3",
            "file": "src/app/shared/modules/spinner/button-spinner/button-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-button-spinner",
            "styleUrls": [
                "./button-spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'food-button-spinner',\r\n  templateUrl: './button-spinner.component.html',\r\n  styleUrls: ['./button-spinner.component.scss'],\r\n})\r\nexport class ButtonSpinnerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lds-ring {\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 24px;\r\n  height: 24px;\r\n}\r\n\r\n.lds-ring div {\r\n  box-sizing: border-box;\r\n  display: block;\r\n  position: absolute;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin: 3px;\r\n  border: 3px solid var(--white);\r\n  border-radius: 50%;\r\n  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r\n  border-color: var(--white) transparent transparent transparent;\r\n}\r\n.lds-ring div:nth-child(1) {\r\n  animation-delay: -0.45s;\r\n}\r\n.lds-ring div:nth-child(2) {\r\n  animation-delay: -0.3s;\r\n}\r\n.lds-ring div:nth-child(3) {\r\n  animation-delay: -0.15s;\r\n}\r\n@keyframes lds-ring {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n",
                    "styleUrl": "./button-spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"lds-ring\">\r\n  <div></div>\r\n  <div></div>\r\n  <div></div>\r\n  <div></div>\r\n</div>\r\n"
        },
        {
            "name": "CardItemComponent",
            "id": "component-CardItemComponent-180988c4475d396cb1e8bf4ec8041c28b8f28271fa9d179a3d1f54727eaab1f496e69c5136e1d28b4ee2bd9a65159e5cf60d306087227892bb9dc7a2917d0097",
            "file": "src/app/shared/modules/card/card-item/card-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-card-item",
            "styleUrls": [
                "./card-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "food",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FoodWithAmountInterface | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deletedProduct",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "updatedProduct",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "foodAmount",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isCart",
                    "defaultValue": "this.router.url === '/cart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "role",
                    "defaultValue": "'client'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "decrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleEdit",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "increment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CartService } from 'src/app/service/cart.service';\r\nimport { FoodWithAmountInterface } from 'src/app/shared/types/types';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { AuthsService } from 'src/app/service/auth.service';\r\nimport { FoodServiceService } from 'src/app/service/food-service.service';\r\nimport { ProductModalComponent } from '../../product-modal/product-modal.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { switchMap, take } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'food-card-item',\r\n  templateUrl: './card-item.component.html',\r\n  styleUrls: ['./card-item.component.scss'],\r\n})\r\nexport class CardItemComponent {\r\n  @Input()\r\n  food: FoodWithAmountInterface | null = null;\r\n  public foodAmount: number = 1;\r\n  isCart = this.router.url === '/cart';\r\n  role = 'client';\r\n\r\n  @Output() deletedProduct: EventEmitter<string> = new EventEmitter();\r\n  @Output() updatedProduct: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor(\r\n    private cartService: CartService,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private authsService: AuthsService,\r\n    private foodServiceService: FoodServiceService,\r\n    private matDialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.authsService.user$.subscribe((user) => {\r\n      this.role = user?.role ? user?.role : 'client';\r\n    });\r\n  }\r\n\r\n  decrement() {\r\n    if (this.foodAmount === 1) {\r\n      return;\r\n    }\r\n    this.foodAmount -= 1;\r\n  }\r\n\r\n  increment() {\r\n    this.foodAmount += 1;\r\n  }\r\n\r\n  handleDelete() {\r\n    this.cartService.removeFromCart(this.food?.id ?? '');\r\n  }\r\n\r\n  handleAdd() {\r\n    if (!this.food) {\r\n      return;\r\n    }\r\n\r\n    this.cartService.addToCart({ ...this.food, amount: this.foodAmount });\r\n\r\n    this.snackBar.open(this.food.title + ' add to your Cart', 'Close', {\r\n      duration: 2 * 1000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'bottom',\r\n    });\r\n\r\n    this.foodAmount = 1;\r\n  }\r\n\r\n  handleEdit(id: string) {\r\n    this.foodServiceService\r\n      .getFoodItemById(id)\r\n      .pipe(\r\n        take(1),\r\n        switchMap((food) => {\r\n          return this.matDialog\r\n            .open(ProductModalComponent, {\r\n              height: '720px',\r\n              width: '900px',\r\n              data: {\r\n                type: 'edit',\r\n                food,\r\n              },\r\n            })\r\n            .afterClosed();\r\n        })\r\n      )\r\n      .subscribe((data) => {\r\n        if (data) {\r\n          this.updatedProduct.emit(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  deleteProduct(id: string) {\r\n    this.deletedProduct.emit(id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "li {\r\n  position: relative;\r\n}\r\n.delete-button {\r\n  border: none;\r\n  background: none;\r\n  cursor: pointer;\r\n}\r\n.delete-btn {\r\n  position: absolute;\r\n  left: 20px;\r\n  top: 20px;\r\n  cursor: pointer;\r\n  z-index: 1000;\r\n}\r\n\r\n.delete-icon {\r\n  color: var(--primary);\r\n  font-size: 2rem;\r\n  &:hover {\r\n    color: var(--secondary);\r\n    transition: var(--transition);\r\n  }\r\n}\r\nbutton.p-element.p-button.p-component {\r\n  padding: 0.3rem;\r\n}\r\nbutton.p-element.p-button.p-component > i {\r\n  font-size: 0.5rem;\r\n}\r\n.card {\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: var(--boxShadow);\r\n  flex-direction: column;\r\n  width: 100%;\r\n  background-color: var(--white);\r\n\r\n  &-image {\r\n    width: 100%;\r\n    height: 300px;\r\n    object-fit: cover;\r\n    &-container {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  &-amount-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n\r\n    &-button {\r\n      background-color: var(--primary);\r\n      height: 20px;\r\n      width: 20px;\r\n      outline: none;\r\n      border: none;\r\n      border-radius: 5px;\r\n      color: #ffffff;\r\n      cursor: pointer;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n\r\n      &:hover {\r\n        background-color: var(--secondary);\r\n        transition: var(--transition);\r\n      }\r\n    }\r\n\r\n    &-text,\r\n    &-text-count {\r\n      font-weight: bold;\r\n    }\r\n  }\r\n\r\n  &-content {\r\n    padding: 1rem;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    &-price {\r\n      font-weight: bold;\r\n    }\r\n  }\r\n\r\n  &-content h1 {\r\n    margin-bottom: 20px;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n  }\r\n}\r\n\r\n.left {\r\n  margin-left: auto;\r\n}\r\n::ng-deep {\r\n  .mat-snack-bar-container {\r\n    background-color: var(--secondary);\r\n    font-weight: 600;\r\n\r\n    color: var(--white);\r\n    box-shadow: var(--boxShadow);\r\n\r\n    .mat-simple-snackbar-action {\r\n      color: var(--primary);\r\n      button {\r\n        font-size: 18px;\r\n        font-weight: 600;\r\n      }\r\n    }\r\n    .mat-simple-snackbar {\r\n      font-size: 18px;\r\n    }\r\n  }\r\n}\r\n\r\n.cart-layout {\r\n  flex-direction: column;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    flex-direction: row;\r\n  }\r\n}\r\n",
                    "styleUrl": "./card-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<li [ngClass]=\"{ 'cart-layout': isCart }\" class=\"card\" *ngIf=\"food\">\r\n  <button\r\n    *ngIf=\"role === 'admin'\"\r\n    pButton\r\n    type=\"button\"\r\n    class=\"p-button-raised p-button-rounded delete-btn p-button-secondary\"\r\n    icon=\"pi pi-trash\"\r\n    (click)=\"deleteProduct(food.id)\"\r\n  ></button>\r\n\r\n  <div class=\"card-image-container\">\r\n    <img class=\"card-image\" [src]=\"food.img\" />\r\n  </div>\r\n  <div class=\"card-content\">\r\n    <h1>{{ food.title }}</h1>\r\n    <p class=\"card-content-price\">\r\n      Price: <span> {{ food.price }}$ </span>\r\n    </p>\r\n    <div class=\"card-amount-container\" *ngIf=\"role !== 'admin'\">\r\n      <p class=\"card-amount-container-text\">Amount:</p>\r\n\r\n      <button\r\n        pButton\r\n        type=\"button\"\r\n        *ngIf=\"!isCart\"\r\n        (click)=\"decrement()\"\r\n        class=\"p-button-secondary\"\r\n      >\r\n        <i *ngIf=\"!isCart\" (click)=\"decrement()\" class=\"pi pi-minus\"></i>\r\n      </button>\r\n\r\n      <p *ngIf=\"isCart\" class=\"card-amount-container-text-count\">\r\n        {{ food.amount }}\r\n      </p>\r\n      <p *ngIf=\"!isCart\" class=\"card-amount-container-text-count\">\r\n        {{ foodAmount }}\r\n      </p>\r\n\r\n      <button\r\n        pButton\r\n        type=\"button\"\r\n        *ngIf=\"!isCart\"\r\n        (click)=\"increment()\"\r\n        class=\"p-button-secondary\"\r\n      >\r\n        <i *ngIf=\"!isCart\" (click)=\"decrement()\" class=\"pi pi-plus\"></i>\r\n      </button>\r\n    </div>\r\n    <button\r\n      pButton\r\n      type=\"button\"\r\n      class=\"left p-button-secondary\"\r\n      icon=\"pi pi-trash\"\r\n      (click)=\"handleDelete()\"\r\n      *ngIf=\"isCart\"\r\n    ></button>\r\n    <food-button\r\n      *ngIf=\"!isCart\"\r\n      class=\"left\"\r\n      (click)=\"role === 'admin' ? handleEdit(food.id) : handleAdd()\"\r\n      [buttonText]=\"role === 'admin' ? 'Edit' : 'Add'\"\r\n    ></food-button>\r\n  </div>\r\n</li>\r\n"
        },
        {
            "name": "CardListComponent",
            "id": "component-CardListComponent-474eed75de3b8a2683faab5b828e1984c0e96a003a96c4f8946b05d552727580cf6e2743d06d4171e9f7e8b0ffd232b8b1e7da7ea6a9c92ca941b4cff813ea13",
            "file": "src/app/shared/modules/card/card-list/card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-card-list",
            "styleUrls": [
                "./card-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "foods",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FoodWithAmountInterface[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isCart",
                    "defaultValue": "this.router.url === '/cart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FoodServiceService } from 'src/app/service/food-service.service';\r\nimport { FoodWithAmountInterface } from 'src/app/shared/types/types';\r\n\r\n@Component({\r\n  selector: 'food-card-list',\r\n  templateUrl: './card-list.component.html',\r\n  styleUrls: ['./card-list.component.scss'],\r\n})\r\nexport class CardListComponent implements OnInit {\r\n  isCart = this.router.url === '/cart';\r\n  constructor(\r\n    private router: Router,\r\n    private foodServiceService: FoodServiceService\r\n  ) {}\r\n\r\n  @Input()\r\n  foods: FoodWithAmountInterface[] = [];\r\n\r\n  ngOnInit(): void {}\r\n\r\n  delete(id: string) {\r\n    this.foodServiceService.deleteFoodItem(id);\r\n    this.foods = this.foods.filter((food) => food.id !== id);\r\n  }\r\n\r\n  update(product: any) {\r\n    this.foods = this.foods.map((food) => {\r\n      console.log(food.id, product);\r\n      if (food.id === product.id) {\r\n        return product;\r\n      } else {\r\n        return food;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list {\r\n  list-style-type: none;\r\n  display: flex;\r\n  margin: 1rem -1rem;\r\n  flex-wrap: wrap;\r\n  min-height: 100%;\r\n  width: calc(100% + 2rem);\r\n}\r\n\r\n.item {\r\n  margin: 1rem;\r\n  width: calc((100% - 1 * 1rem) / 1);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: calc((100% - 4 * 1rem) / 2);\r\n  }\r\n\r\n  @media screen and (min-width: 1200px) {\r\n    width: calc((100% - 6 * 1rem) / 3);\r\n  }\r\n}\r\n\r\n.cart-layout {\r\n  flex-wrap: nowrap;\r\n  flex-direction: column;\r\n\r\n  .item {\r\n    width: calc(100% - 2 * 1rem);\r\n  }\r\n}\r\n",
                    "styleUrl": "./card-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul class=\"list\" [ngClass]=\"{ 'cart-layout': isCart }\">\r\n  <ng-container *ngFor=\"let food of foods\">\r\n    <food-card-item\r\n      class=\"item\"\r\n      [food]=\"food\"\r\n      (deletedProduct)=\"delete($event)\"\r\n      (updatedProduct)=\"update($event)\"\r\n    ></food-card-item>\r\n  </ng-container>\r\n</ul>\r\n"
        },
        {
            "name": "CartPageComponent",
            "id": "component-CartPageComponent-502a0c1f6ad93b707a6608a06bbf5d378414f0311e4ed716a6fcb156c42fba398a3f1d466a02d420735d38d2b10b7b129d7d35d6c0719c46535bf35e9a871f5c",
            "file": "src/app/cart-page/cart-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart-page",
            "styleUrls": [
                "./cart-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CartServiceInterface>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CartService } from '../service/cart.service';\r\nimport { CartServiceInterface } from '../service/types';\r\n\r\n@Component({\r\n  selector: 'app-cart-page',\r\n  templateUrl: './cart-page.component.html',\r\n  styleUrls: ['./cart-page.component.scss'],\r\n})\r\nexport class CartPageComponent implements OnInit {\r\n  constructor(private cartService: CartService) {}\r\n\r\n  cart$: Observable<CartServiceInterface>;\r\n\r\n  ngOnInit(): void {\r\n    this.cart$ = this.cartService.getCartData();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".total-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  color: var(--mainFont);\r\n}\r\n\r\n.layout {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.order-link {\r\n  margin-left: auto;\r\n}\r\n",
                    "styleUrl": "./cart-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"layout\">\r\n  <food-card-list [foods]=\"(cart$ | async)?.items ?? []\"></food-card-list>\r\n  <div class=\"total-container\">\r\n    <h1>Total:</h1>\r\n    <h1 class=\"total\">{{ (cart$ | async)?.total }}$</h1>\r\n  </div>\r\n  <a class=\"order-link\" [routerLink]=\"'/order-form'\">\r\n    <food-button className=\"order\" buttonText=\"Go to order\"></food-button>\r\n  </a>\r\n</div>\r\n"
        },
        {
            "name": "CategoriesComponent",
            "id": "component-CategoriesComponent-f12c436663d07873b713b021e4f95a072d5a923e14dd7afcefd95304c23843d228a272c638cc3fb91896ed49a2edec421754c7c5684766097d9d3f3ae50f725a",
            "file": "src/app/main-page/components/categories/categories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-categories",
            "styleUrls": [
                "./categories.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./categories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selectedCategory",
                    "defaultValue": "new EventEmitter<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortItems",
                    "defaultValue": "new EventEmitter<OrderByDirection>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "CATEGORIES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderByDirection",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "chooseCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\nimport { CATEGORIES } from '../../../shared/constants';\r\n  \r\n@Component({\r\n  selector: 'food-categories',\r\n  templateUrl: './categories.component.html',\r\n  styleUrls: ['./categories.component.scss'],\r\n})\r\nexport class CategoriesComponent implements OnInit {\r\n  categories: string[] = CATEGORIES;\r\n  sort: OrderByDirection;\r\n\r\n  @Output() selectedCategory = new EventEmitter<string>;\r\n  @Output() sortItems = new EventEmitter<OrderByDirection>;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  chooseCategory(category: string): void {\r\n    this.selectedCategory.emit(category.toLowerCase())\r\n  }\r\n\r\n  sortItem(): void {\r\n    if (this.sort === \"desc\") {\r\n      this.sort = \"asc\"\r\n    }\r\n    else {\r\n      this.sort = \"desc\"\r\n    }\r\n    this.sortItems.emit(this.sort);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".categories {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  margin-top: 30px;\r\n}\r\n\r\nul {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  li {\r\n    margin-right: 15px;\r\n    margin-bottom: 15px;\r\n  }\r\n}\r\n\r\nspan {\r\n  font-size: 40px;\r\n  color: var(--primary);\r\n\r\n  &:hover {\r\n    color: var(--secondary);\r\n    transition: var(--transition);\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./categories.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"categories\">\r\n  <ul>\r\n    <li *ngFor=\"let category of categories\">\r\n      <food-button\r\n        (click)=\"chooseCategory(category)\"\r\n        [buttonText]=\"category\"\r\n      ></food-button>\r\n    </li>\r\n  </ul>\r\n  <span class=\"material-symbols-outlined\" (click)=\"sortItem()\">\r\n    sort_by_alpha\r\n  </span>\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-da1f66f1968756a3fd0c7046b9d220fb2f73a31091819db773fc4b9810bd221c35d8d317a9b52acd2e57f2ac170d285ccdc348883345dd02dda90a5d5bd04990",
            "file": "src/app/shared/modules/footer/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'food-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss'],\r\n})\r\nexport class FooterComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "footer {\r\n  background-color: var(--primary);\r\n  color: var(--white);\r\n  width: 100%;\r\n  display: block;\r\n}\r\n\r\ndiv {\r\n  margin: 0 auto;\r\n\r\n  p {\r\n    padding: 20px 0;\r\n    text-align: center;\r\n    margin: 0px;\r\n  }\r\n\r\n  span {\r\n    color: var(--error);\r\n  }\r\n\r\n  a {\r\n    display: inline-block;\r\n    text-decoration: underline;\r\n    cursor: pointer;\r\n    color: var(--white);\r\n  }\r\n}\r\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer>\r\n  <div class=\"layout\">\r\n    <p>\r\n      &#169; 2023 | All Rights Reserved | Developed with &nbsp;\r\n      <span>&#10084;</span>&nbsp; by &nbsp;\r\n      <a href=\"https://www.linkedin.com/in/helen-stepina-a5b8b8211/\">\r\n        Stepina Helen\r\n      </a>\r\n      and\r\n      <a href=\"https://www.linkedin.com/in/serhii-kalashnykov-46701320b/\">\r\n        Serhii Kalashnykov\r\n      </a>\r\n    </p>\r\n  </div>\r\n</footer>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-dc780ff02441d29057261829e85185863e8b5f8609abfcf633f97877ad140aa8e3091bf4b6961ab6a01ed48f4ffddbef56eccac8889b1e2be4c5c11322440cb2",
            "file": "src/app/order-form-page/components/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "orderForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<FormGoupInterface>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { FormGoupInterface } from 'src/app/shared/types/types';\r\n\r\n@Component({\r\n  selector: 'food-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.scss'],\r\n})\r\nexport class FormComponent implements OnInit {\r\n  orderForm: FormGroup<FormGoupInterface>;\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.orderForm = this.fb.group({\r\n      firstName: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.minLength(3)],\r\n      }),\r\n      lastName: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.minLength(3)],\r\n      }),\r\n      phone: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.pattern('[0-9 ]{12}')],\r\n      }),\r\n      city: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.minLength(3)],\r\n      }),\r\n      street: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.minLength(3)],\r\n      }),\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  color: var(--primary);\r\n  font-size: 32px;\r\n  line-height: 38px;\r\n}\r\n",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>Order summaries:</h2>\r\n<form [formGroup]=\"orderForm\" autocomplete=\"off\">\r\n  <food-input-form\r\n    label=\"First Name\"\r\n    [control]=\"orderForm.controls.firstName\"\r\n  ></food-input-form>\r\n  <food-input-form\r\n    label=\"Last Name\"\r\n    [control]=\"orderForm.controls.lastName\"\r\n  ></food-input-form>\r\n  <food-input-form\r\n    label=\"Phone Number\"\r\n    [control]=\"orderForm.controls.phone\"\r\n  ></food-input-form>\r\n  <food-input-form label=\"City\" [control]=\"orderForm.controls.city\"></food-input-form>\r\n  <food-input-form label=\"Street\" [control]=\"orderForm.controls.street\"></food-input-form>\r\n</form>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-4e745fc938d0af5a47e66b28a24a6b268bdd11c20634cae4d564b491ecdd95712c45787d7660b2686730de5eba74c9d3cd7431cf6381eefd07addfa3024ed4f7",
            "file": "src/app/shared/modules/header/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animationLayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'animationLayer'"
                        }
                    ]
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSpanElement>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dark'"
                        }
                    ]
                },
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSpanElement>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'default'"
                        }
                    ]
                },
                {
                    "name": "isDefault",
                    "defaultValue": "this.theme === 'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sidenavService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidenavService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "theme",
                    "defaultValue": "this.localStorageService.getLocalStorageItem(LocalStorageKeys.theme) ||\r\n    'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [
                        {
                            "name": "themeName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "themeName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setThemeWithAnimation",
                    "args": [
                        {
                            "name": "elements",
                            "type": "AnimateThemeChangeElements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "themeName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "type": "AnimateThemeChangeElements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "themeName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { LocalStorageService } from 'src/app/service/local-storage.service';\r\nimport { SidenavService } from 'src/app/service/sidenav.service';\r\nimport { ThemeService } from 'src/app/service/theme.service';\r\nimport { LocalStorageKeys } from 'src/app/service/types';\r\nimport { ITHEMES } from 'src/app/shared/types/types';\r\n\r\nexport interface AnimateThemeChangeElements {\r\n  previousElement: HTMLSpanElement;\r\n  currentElement: HTMLSpanElement;\r\n  animationLayer: HTMLDivElement;\r\n}\r\n\r\n@Component({\r\n  selector: 'food-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @ViewChild('animationLayer') animationLayer: ElementRef<HTMLDivElement>;\r\n  @ViewChild('dark') dark: ElementRef<HTMLSpanElement>;\r\n  @ViewChild('default') default: ElementRef<HTMLSpanElement>;\r\n\r\n  theme: keyof ITHEMES =\r\n    this.localStorageService.getLocalStorageItem(LocalStorageKeys.theme) ||\r\n    'default';\r\n\r\n  isDefault = this.theme === 'default';\r\n\r\n  constructor(\r\n    private themeService: ThemeService,\r\n    private localStorageService: LocalStorageService,\r\n    public sidenavService: SidenavService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.themeService.setTheme(this.theme);\r\n  }\r\n\r\n  toggleSideNav() {\r\n    this.sidenavService.toggle();\r\n  }\r\n\r\n  setThemeWithAnimation(\r\n    elements: AnimateThemeChangeElements,\r\n    themeName: keyof ITHEMES\r\n  ) {\r\n    const { previousElement, currentElement, animationLayer } = elements;\r\n\r\n    animationLayer.classList.add('animate-bg');\r\n    previousElement.classList.remove('fade-in');\r\n    previousElement.classList.add('fade-out');\r\n\r\n    setTimeout(() => {\r\n      animationLayer.classList.remove('animate-bg');\r\n      previousElement.classList.add('display-none');\r\n      currentElement.classList.add('fade-in');\r\n      currentElement.classList.remove('display-none', 'fade-out');\r\n\r\n      this.themeService.setTheme(themeName);\r\n      this.localStorageService.setLocalstorageItem(\r\n        LocalStorageKeys.theme,\r\n        themeName\r\n      );\r\n    }, 700);\r\n  }\r\n\r\n  changeTheme(themeName: keyof ITHEMES) {\r\n    this.theme = themeName;\r\n\r\n    const elements: AnimateThemeChangeElements = {\r\n      previousElement:\r\n        this.theme === 'default'\r\n          ? this.dark.nativeElement\r\n          : this.default.nativeElement,\r\n      currentElement:\r\n        this.theme === 'dark'\r\n          ? this.dark.nativeElement\r\n          : this.default.nativeElement,\r\n      animationLayer: this.animationLayer.nativeElement,\r\n    };\r\n\r\n    this.setThemeWithAnimation(elements, this.theme);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "header {\r\n  position: relative;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.25);\r\n  z-index: 10;\r\n  background-color: var(--primary);\r\n  color: var(--white);\r\n  padding: 8px 0;\r\n\r\n  a {\r\n    color: var(--white);\r\n  }\r\n}\r\n\r\n.navbar-button {\r\n  background: none;\r\n  outline: none;\r\n  border: none;\r\n\r\n  &:focus-visible {\r\n    outline: 1px solid var(--secondary);\r\n  }\r\n\r\n  span {\r\n    color: var(--white);\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.wrapper {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  position: relative;\r\n  padding: 0 15px;\r\n}\r\n\r\nh2 {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  font-family: \"Mansalva\", cursive;\r\n  margin: 0;\r\n  font-size: 24px;\r\n  line-height: 24px;\r\n  color: var(--white);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 32px;\r\n    line-height: 32px;\r\n  }\r\n}\r\n\r\n.icon-container {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  hr {\r\n    transform: rotate(180deg);\r\n    height: 56px;\r\n    margin-right: 8px;\r\n    margin-left: 8px;\r\n    border-radius: 3px;\r\n  }\r\n}\r\n\r\n.mode-wrapper {\r\n  position: relative;\r\n}\r\n\r\n.dark-mode {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  opacity: 0.8;\r\n  transform: scale(0);\r\n  background-color: var(--mainFont);\r\n}\r\n\r\n.animate-bg {\r\n  animation: circle 1s 1;\r\n  animation-timing-function: ease-in;\r\n}\r\n\r\n@keyframes circle {\r\n  0% {\r\n    clip-path: circle(0%);\r\n    transform: scale(0);\r\n  }\r\n\r\n  100% {\r\n    clip-path: circle(100%);\r\n    transform: scale(250);\r\n  }\r\n}\r\n\r\n.fade-out {\r\n  animation: fadeOut 1s 1;\r\n}\r\n\r\n.fade-in {\r\n  animation: fadeIn 1s 1;\r\n}\r\n\r\n.display-none {\r\n  display: none;\r\n}\r\n\r\n@keyframes fadeOut {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\r\n  <div class=\"layout wrapper\">\r\n    <a [routerLink]=\"'/'\">\r\n      <span class=\"material-symbols-outlined\">fastfood</span>\r\n    </a>\r\n    <h2>Simple food</h2>\r\n    <div class=\"icon-container\">\r\n      <div class=\"mode-wrapper\">\r\n        <div #animationLayer class=\"dark-mode\"></div>\r\n        <span\r\n          #dark\r\n          [ngClass]=\"{ 'display-none': isDefault }\"\r\n          class=\"material-symbols-outlined\"\r\n          (click)=\"changeTheme('default')\"\r\n        >\r\n          light_mode\r\n        </span>\r\n\r\n        <span\r\n          [ngClass]=\"{ 'display-none': !isDefault }\"\r\n          #default\r\n          class=\"material-symbols-outlined\"\r\n          (click)=\"changeTheme('dark')\"\r\n        >\r\n          dark_mode\r\n        </span>\r\n      </div>\r\n      <button (click)=\"toggleSideNav()\" class=\"navbar-button\">\r\n        <span class=\"material-symbols-outlined\" exclude>menu</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</header>\r\n"
        },
        {
            "name": "HeroComponent",
            "id": "component-HeroComponent-fe8a35cca3c94c4ddf8abda983efbede8cc4c7f81f5b1765d6b943a595fc84e7410dd3b0070d521814853915161398829bd0f6ef6bd5f3e0528ffd2db80b060d",
            "file": "src/app/main-page/components/hero/hero.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-hero",
            "styleUrls": [
                "./hero.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hero.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'food-hero',\r\n  templateUrl: './hero.component.html',\r\n  styleUrls: ['./hero.component.scss'],\r\n})\r\nexport class HeroComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".background {\r\n  background-image: url(\"../../../../assets/simply-food.jpg\");\r\n  position: relative;\r\n  margin: 0 auto;\r\n  background-size: cover;\r\n  display: block;\r\n  padding: 30px 32px;\r\n  max-width: 480px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    padding: 75px 0;\r\n    height: 312px;\r\n    max-width: 768px;\r\n  }\r\n\r\n  @media screen and (min-width: 1200px) {\r\n    max-width: 1600px;\r\n    padding: 215px 0;\r\n    height: 600px;\r\n  }\r\n}\r\n\r\n.content {\r\n  margin: 0 auto;\r\n  background: var(--background);\r\n  border-radius: 15px;\r\n  text-align: center;\r\n  width: 100%;\r\n  padding: 36px 48px;\r\n\r\n  h2 {\r\n    margin: 0 0 22px 0;\r\n    font-weight: 500;\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n    font-size: 12px;\r\n    line-height: 14px;\r\n  }\r\n\r\n  @media screen and (min-width: 480px) {\r\n    width: 416px;\r\n  }\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 416px;\r\n    h2 {\r\n      font-size: 16px;\r\n      line-height: 19px;\r\n      font-weight: 500;\r\n    }\r\n\r\n    p {\r\n      font-weight: 500;\r\n      font-size: 12px;\r\n      line-height: 14px;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1200px) {\r\n    width: 660px;\r\n\r\n    h2 {\r\n      font-size: 36px;\r\n      line-height: 42px;\r\n      margin: 0 0 22px 0;\r\n    }\r\n\r\n    p {\r\n      font-size: 20px;\r\n      line-height: 23px;\r\n      font-weight: 500;\r\n      margin: 0;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./hero.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"background\">\r\n  <div class=\"content\">\r\n    <h2>Delicious Food, Delivered To You</h2>\r\n    <p>\r\n      Choose your favorite meal from our broad selection of <br />\r\n      available meals <br />\r\n      and enjoy a delicious lunch or dinner at home.\r\n    </p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ImageUploadComponent",
            "id": "component-ImageUploadComponent-94042976511bc437c9cf837f4c0c21d8a8456f9c2daf4a3618f27aa58d7a8afd9f6908c8188423f76e354af13e892e18bf84204f0f08c593a4ffde234edc22b0",
            "file": "src/app/shared/modules/image-upload/image-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: ImageUploadComponent,\n}",
                    "type": "component"
                }
            ],
            "selector": "food-image-upload",
            "styleUrls": [
                "./image-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "imageURL",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileInput'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "fileChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleErrors",
                    "args": [
                        {
                            "name": "controlErrors",
                            "type": "ValidationErrors | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlErrors",
                            "type": "ValidationErrors | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "url",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "url",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n} from '@angular/forms';\r\nimport { generateErrors } from '../../helpers/form.helpers';\r\n\r\n@Component({\r\n  selector: 'food-image-upload',\r\n  templateUrl: './image-upload.component.html',\r\n  styleUrls: ['./image-upload.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: ImageUploadComponent,\r\n    },\r\n  ],\r\n})\r\nexport class ImageUploadComponent implements OnInit, ControlValueAccessor {\r\n  constructor() {}\r\n\r\n  @Input()\r\n  control: FormControl = new FormControl();\r\n\r\n  imageURL: string | null = null;\r\n\r\n  onChange = (url: string) => {};\r\n\r\n  onTouched = () => {};\r\n\r\n  touched = false;\r\n\r\n  disabled = false;\r\n\r\n  writeValue(url: string) {\r\n    this.imageURL = url;\r\n  }\r\n\r\n  registerOnChange(onChange: (url: string) => void) {\r\n    this.onChange = onChange;\r\n  }\r\n\r\n  registerOnTouched(onTouched: () => void) {\r\n    this.onTouched = onTouched;\r\n  }\r\n\r\n  markAsTouched() {\r\n    if (!this.touched) {\r\n      this.onTouched();\r\n      this.touched = true;\r\n    }\r\n  }\r\n\r\n  setDisabledState(disabled: boolean) {\r\n    this.disabled = disabled;\r\n  }\r\n\r\n  @ViewChild('fileInput') input: ElementRef<HTMLInputElement>;\r\n\r\n  ngOnInit(): void {}\r\n\r\n  handleErrors(controlErrors: ValidationErrors | null, key: string) {\r\n    return generateErrors(controlErrors, key);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    const target = event.target as HTMLInputElement;\r\n    if (target.files && target.files.length) {\r\n      const file = target.files[0];\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        this.imageURL = reader.result as string;\r\n        this.markAsTouched();\r\n        this.onChange(this.imageURL);\r\n        this.input.nativeElement.value = '';\r\n      };\r\n    }\r\n  }\r\n\r\n  onClick() {\r\n    this.markAsTouched();\r\n    this.input.nativeElement.click();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".file-input {\r\n  display: none;\r\n}\r\n\r\n.file-button {\r\n  background: none;\r\n  border: none;\r\n  padding: 0.5rem;\r\n  background-color: var(--primary);\r\n  border-radius: 4px;\r\n  color: var(--secondaryFont);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.error-wrapper {\r\n  display: flex;\r\n  color: var(--error);\r\n}\r\n\r\np {\r\n  color: var(--error);\r\n  font-size: 12px;\r\n  margin: 0;\r\n}\r\n",
                    "styleUrl": "./image-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<input\r\n  class=\"file-input\"\r\n  (change)=\"fileChange($event)\"\r\n  #fileInput\r\n  type=\"file\"\r\n/>\r\n<button (click)=\"onClick()\" class=\"file-button\">Select file</button>\r\n<div class=\"error-wrapper\" *ngFor=\"let error of control.errors | keyvalue\">\r\n  <p\r\n    class=\"error-message\"\r\n    *ngIf=\"(control.hasError(error.key) && control.touched) || control.dirty\"\r\n  >\r\n    {{ this.handleErrors(control.errors, error.key) }}\r\n  </p>\r\n</div>\r\n"
        },
        {
            "name": "InfiniteScrollComponent",
            "id": "component-InfiniteScrollComponent-e0bd0690c16ed59ba4436fe1bdfcdbba656270125c86130ebf467c6db4d02b8d184f9d11c34e5500ff194560874459a595c07236fba1201b6f01ab6c442e2fb9",
            "file": "src/app/main-page/components/infinite-scroll/infinite-scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "infinite-scroll",
            "styleUrls": [
                "./infinite-scroll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./infinite-scroll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "{}",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "scrolled",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "anchor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'anchor'"
                        }
                    ]
                },
                {
                    "name": "observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IntersectionObserver",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isHostScrollable",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'infinite-scroll',\r\n  templateUrl: './infinite-scroll.component.html',\r\n  styleUrls: ['./infinite-scroll.component.scss'],\r\n})\r\nexport class InfiniteScrollComponent implements OnDestroy {\r\n  @Input() options = {};\r\n  @Output() scrolled = new EventEmitter();\r\n  @ViewChild('anchor') anchor: ElementRef<HTMLElement>;\r\n\r\n  private observer: IntersectionObserver;\r\n\r\n  constructor(private host: ElementRef<HTMLElement>) {}\r\n\r\n  get element() {\r\n    return this.host.nativeElement;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const options: IntersectionObserverInit = {\r\n      root: this.isHostScrollable()\r\n        ? this.host.nativeElement\r\n        : this.host.nativeElement.querySelector(\"[id='scrollable']\"),\r\n      threshold: 0.8,\r\n      ...this.options,\r\n    };\r\n\r\n    this.observer = new IntersectionObserver(([entry]) => {\r\n      entry.isIntersecting && this.scrolled.emit();\r\n    }, options);\r\n\r\n    this.observer.observe(this.anchor.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  private isHostScrollable() {\r\n    const style = window.getComputedStyle(this.element);\r\n\r\n    return (\r\n      style.getPropertyValue('overflow') === 'auto' ||\r\n      style.getPropertyValue('overflow-y') === 'scroll'\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".anchor {\r\n  width: 100%;\r\n  height: 10px;\r\n  visibility: hidden;\r\n}\r\n",
                    "styleUrl": "./infinite-scroll.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "host",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n<div class=\"anchor\" #anchor></div>\r\n"
        },
        {
            "name": "InputFormComponent",
            "id": "component-InputFormComponent-3f409801756da55f5ec77af0cdc844d84a852c82bb90a3fd08dab66764456b8ec11a7ff66bef9a1cc1f7096b9787449bb20bfa3c0ce268e0c8ef9e5e9d43f239",
            "file": "src/app/shared/modules/input-form/input-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-input-form",
            "styleUrls": [
                "./input-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleErrors",
                    "args": [
                        {
                            "name": "controlErrors",
                            "type": "ValidationErrors | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlErrors",
                            "type": "ValidationErrors | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, ValidationErrors } from '@angular/forms';\r\nimport { generateErrors } from '../../helpers/form.helpers';\r\n\r\n@Component({\r\n  selector: 'food-input-form',\r\n  templateUrl: './input-form.component.html',\r\n  styleUrls: ['./input-form.component.scss'],\r\n})\r\nexport class InputFormComponent implements OnInit {\r\n  @Input()\r\n  control: FormControl = new FormControl();\r\n\r\n  @Input()\r\n  label: string = '';\r\n\r\n  @Input()\r\n  type: string = 'text';\r\n\r\n  handleErrors(controlErrors: ValidationErrors | null, key: string) {\r\n    return generateErrors(controlErrors, key);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 23px;\r\n  color: var(--mainFont);\r\n\r\n  p {\r\n    position: absolute;\r\n    bottom: -3px;\r\n    font-size: 12px;\r\n  }\r\n}\r\n\r\ninput {\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n  margin-top: 12px;\r\n  height: 52px;\r\n  font-size: 24px;\r\n  line-height: 28px;\r\n  border: 1px solid var(--primary);\r\n  width: 100%;\r\n\r\n  &.invalid {\r\n    border: 1px solid var(--error);\r\n  }\r\n}\r\n\r\ninput:focus {\r\n  border: 1px solid var(--primary);\r\n  outline: none;\r\n}\r\n\r\n.field-wrapper {\r\n  position: relative;\r\n}\r\n\r\n.error-wrapper {\r\n  display: flex;\r\n  color: var(--error);\r\n}\r\n\r\np {\r\n  color: var(--error);\r\n  font-size: 12px;\r\n  margin: 0;\r\n  margin-bottom: 16px;\r\n}\r\n",
                    "styleUrl": "./input-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"field-wrapper\">\r\n  <label>\r\n    {{ label }}\r\n    <input\r\n      [ngClass]=\"{\r\n        invalid: control.invalid && (control.dirty || control.touched)\r\n      }\"\r\n      [type]=\"type\"\r\n      [formControl]=\"control\"\r\n    />\r\n  </label>\r\n  <div class=\"error-wrapper\" *ngFor=\"let error of control.errors | keyvalue\">\r\n    <p\r\n      class=\"error-message\"\r\n      *ngIf=\"(control.hasError(error.key) && control.touched) || control.dirty\"\r\n    >\r\n      {{ handleErrors(control.errors, error.key) }}\r\n    </p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LogInPageComponent",
            "id": "component-LogInPageComponent-d0ba746db7b9a6a9f724dea97dec83adaf3157de9d8091ac3b1eb07d905ce71e5859de9bf81995c1cda96cffbdc2b72c218fea3a83c4758e2ee1274adc8cea91",
            "file": "src/app/log-in-page/log-in-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-log-in-page",
            "styleUrls": [
                "./log-in-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./log-in-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isVisiblePassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<IFormGoupLogin>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { AuthsService } from '../service/auth.service';\r\nimport { IFormGoupLogin } from '../shared/types/types';\r\n\r\n@Component({\r\n  selector: 'app-log-in-page',\r\n  templateUrl: './log-in-page.component.html',\r\n  styleUrls: ['./log-in-page.component.scss'],\r\n})\r\nexport class LogInPageComponent implements OnInit {\r\n  loginForm: FormGroup<IFormGoupLogin>;\r\n  isVisiblePassword: boolean = false;\r\n\r\n  constructor(private fb: FormBuilder, private authsService: AuthsService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      email: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.email],\r\n      }),\r\n      password: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.minLength(6)],\r\n      }),\r\n    });\r\n  }\r\n\r\n  login() {\r\n    const { email, password } = this.loginForm.value;\r\n    if (email && password) {\r\n      this.authsService.signIn(email, password);\r\n    }\r\n  }\r\n\r\n  showPassword() {\r\n    this.isVisiblePassword = !this.isVisiblePassword;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-wrap {\r\n  position: relative;\r\n  span {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 50px;\r\n    width: 50px;\r\n    height: 50px;\r\n    z-index: 10;\r\n  }\r\n}\r\nform {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  h2 {\r\n    text-align: center;\r\n    font-weight: 500;\r\n    font-size: 40px;\r\n    line-height: 47px;\r\n    color: var(--primary);\r\n  }\r\n}\r\nfood-button {\r\n  margin: 0 auto;\r\n}\r\n",
                    "styleUrl": "./log-in-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"layout\">\r\n  <form [formGroup]=\"loginForm\" autocomplete=\"off\">\r\n    <h2>Login page</h2>\r\n    <food-input-form\r\n      label=\"Email\"\r\n      data-testid=\"email\"\r\n      [control]=\"loginForm.controls.email\"\r\n    ></food-input-form>\r\n    <div class=\"input-wrap\">\r\n      <span (click)=\"showPassword()\" class=\"material-symbols-sharp\">{{\r\n        isVisiblePassword ? \"visibility\" : \"visibility_off\"\r\n      }}</span>\r\n      <food-input-form\r\n        data-testid=\"password\"\r\n        label=\"Password\"\r\n        [control]=\"loginForm.controls.password\"\r\n        [type]=\"isVisiblePassword ? 'text' : 'password'\"\r\n      ></food-input-form>\r\n    </div>\r\n    <food-button\r\n      type=\"submit\"\r\n      (click)=\"login()\"\r\n      buttonText=\"Login\"\r\n      className=\"auth\"\r\n    ></food-button>\r\n  </form>\r\n  <food-social-links></food-social-links>\r\n</div>\r\n"
        },
        {
            "name": "MainPageComponent",
            "id": "component-MainPageComponent-df5ee6d49d2258751522800936c5a2f56e26481446b17ad9c251368f85b9fcd59bcd3f5f785af16fa2380278f00a24d933fe1a6e930cfada575aea94af48f562",
            "file": "src/app/main-page/main-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-main-page",
            "styleUrls": [
                "./main-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthsService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "category",
                    "defaultValue": "this.localStorageService.getLocalStorageItem(LocalStorageKeys.category) ??\r\n    'all'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cursor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | FoodWithAmountInterface",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "foods",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FoodWithAmountInterface[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hasMore",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sort",
                    "defaultValue": "this.localStorageService.getLocalStorageItem(LocalStorageKeys.sort) ||\r\n    'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderByDirection",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchMoreItems",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sort",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cursor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cursor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterItemsHandler",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFoods",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sort",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cursor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cursor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortedItemsHandler",
                    "args": [
                        {
                            "name": "sort",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "OrderByDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { OrderByDirection } from 'firebase/firestore';\r\nimport { BehaviorSubject, map, Observable, switchMap } from 'rxjs';\r\nimport { FoodServiceService } from 'src/app/service/food-service.service';\r\nimport { AuthsService } from '../service/auth.service';\r\nimport { LocalStorageService } from '../service/local-storage.service';\r\nimport { SpinnerService } from '../service/spinner.service';\r\nimport { LocalStorageKeys } from '../service/types';\r\nimport { DEFAULT_FETCH_LIMIT } from '../shared/constants';\r\nimport { ProductModalComponent } from '../shared/modules/product-modal/product-modal.component';\r\nimport { FoodWithAmountInterface } from '../shared/types/types';\r\n\r\n@Component({\r\n  selector: 'food-main-page',\r\n  templateUrl: './main-page.component.html',\r\n  styleUrls: ['./main-page.component.scss'],\r\n})\r\nexport class MainPageComponent implements OnInit {\r\n  category: string =\r\n    this.localStorageService.getLocalStorageItem(LocalStorageKeys.category) ??\r\n    'all';\r\n  sort: OrderByDirection =\r\n    this.localStorageService.getLocalStorageItem(LocalStorageKeys.sort) ||\r\n    'asc';\r\n\r\n  cursor: null | FoodWithAmountInterface = null;\r\n\r\n  private hasMore = true;\r\n  foods: FoodWithAmountInterface[] = [];\r\n\r\n  constructor(\r\n    private foodServiceService: FoodServiceService,\r\n    private localStorageService: LocalStorageService,\r\n    private spinnerService: SpinnerService,\r\n    public authsService: AuthsService,\r\n    private matDialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getFoods(this.category, this.sort, this.cursor);\r\n  }\r\n\r\n  getFoods(category: string, sort: OrderByDirection, cursor: any) {\r\n    this.foodServiceService\r\n      .getFoodsList(category, sort, cursor)\r\n      .subscribe((data) => {\r\n        this.foods = data;\r\n        // this.cursor = this.foods[this.foods.length - 1];\r\n      });\r\n  }\r\n\r\n  filterItemsHandler(category: string) {\r\n    this.category = category;\r\n    this.cursor = null;\r\n    this.getFoods(this.category, this.sort, this.cursor);\r\n    this.localStorageService.setLocalstorageItem(\r\n      LocalStorageKeys.category,\r\n      this.category\r\n    );\r\n  }\r\n\r\n  sortedItemsHandler(sort: OrderByDirection) {\r\n    this.sort = sort;\r\n    this.foods = [];\r\n    this.cursor = null;\r\n    this.getFoods(this.category, this.sort, this.cursor);\r\n    this.localStorageService.setLocalstorageItem(\r\n      LocalStorageKeys.sort,\r\n      this.sort\r\n    );\r\n  }\r\n\r\n  fetchMoreItems(category: string, sort: OrderByDirection, cursor: any) {\r\n    this.foodServiceService\r\n      .getFoodsList(category, sort, cursor)\r\n      .subscribe((data) => {\r\n        if (data.length < DEFAULT_FETCH_LIMIT || data.length === 0) {\r\n          this.hasMore = false;\r\n        }\r\n        this.foods.push(...data);\r\n        this.cursor = this.foods[this.foods.length - 1];\r\n      });\r\n  }\r\n\r\n  fetchMore() {\r\n    this.cursor = this.foods[this.foods.length - 1];\r\n    this.fetchMoreItems(this.category, this.sort, this.cursor);\r\n  }\r\n\r\n  addProduct() {\r\n    this.matDialog\r\n      .open(ProductModalComponent, {\r\n        height: '720px',\r\n        width: '900px',\r\n        data: {\r\n          type: 'create',\r\n        },\r\n      })\r\n      .afterClosed();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./main-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorageService",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"layout\">\r\n  <food-hero *ngIf=\"(authsService.user$ | async)?.role !== 'admin'\"></food-hero>\r\n  <food-button\r\n    *ngIf=\"(authsService.user$ | async)?.role === 'admin'\"\r\n    className=\"addProduct\"\r\n    [buttonText]=\"'+  Add new product'\"\r\n    (click)=\"addProduct()\"\r\n  ></food-button>\r\n  <food-categories\r\n    (selectedCategory)=\"filterItemsHandler($event)\"\r\n    (sortItems)=\"sortedItemsHandler($event)\"\r\n  ></food-categories>\r\n  <!-- <infinite-scroll (scrolled)=\"fetchMore()\"> -->\r\n  <food-card-list [foods]=\"foods\"></food-card-list>\r\n  <!-- </infinite-scroll> -->\r\n</div>\r\n"
        },
        {
            "name": "OrderFormPageComponent",
            "id": "component-OrderFormPageComponent-bdb5f66faca01f0b7255aa6b05b7b2e444ef019f68647e1525ae202d1a42219904fca78e0a7c1a195aa69ff788cabc49c3029431f28e096b84b0444c43aacc56",
            "file": "src/app/order-form-page/order-form-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-order-form-page",
            "styleUrls": [
                "./order-form-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-form-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "myForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormComponent",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'orderForm'"
                        }
                    ]
                },
                {
                    "name": "orderList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IOrdersHistoryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { CartService } from 'src/app/service/cart.service';\r\nimport { OrderHistoryService } from 'src/app/service/order-history-service.service';\r\nimport { AuthsService } from '../service/auth.service';\r\nimport { validateAllFormFields } from '../shared/helpers/form.helpers';\r\nimport { IOrdersHistoryItem } from '../shared/types/types';\r\nimport { FormComponent } from './components/form/form.component';\r\n\r\n@Component({\r\n  selector: 'food-order-form-page',\r\n  templateUrl: './order-form-page.component.html',\r\n  styleUrls: ['./order-form-page.component.scss'],\r\n})\r\nexport class OrderFormPageComponent implements OnInit, OnDestroy {\r\n  @ViewChild('orderForm') myForm: FormComponent;\r\n\r\n  orderList: IOrdersHistoryItem[];\r\n  destroyed$: Subject<boolean> = new Subject();\r\n  isLoading: boolean = false;\r\n\r\n  constructor(\r\n    private orderHistoryService: OrderHistoryService,\r\n    private cartService: CartService,\r\n    private router: Router,\r\n    private authsService: AuthsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.cartService\r\n      .getCartData()\r\n      .pipe(takeUntil(this.destroyed$))\r\n      .subscribe((data) => {\r\n        this.orderList = data.items;\r\n      });\r\n  }\r\n\r\n  async submitHandler() {\r\n    if (this.myForm.orderForm.valid) {\r\n      this.isLoading = true;\r\n\r\n      await this.orderHistoryService.addOrderItemToHistory(\r\n        {\r\n          ...this.myForm.orderForm.getRawValue(),\r\n          date: new Date().toString(),\r\n          foods: this.orderList,\r\n        },\r\n        this.authsService.userId\r\n      );\r\n\r\n      this.isLoading = false;\r\n      this.cartService.clearCart();\r\n      this.myForm.orderForm.reset();\r\n      this.router.navigate(['/order-history']);\r\n    } else {\r\n      validateAllFormFields(this.myForm.orderForm);\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  font-weight: 500;\r\n  font-size: 40px;\r\n  line-height: 47px;\r\n  color: var(--primary);\r\n}\r\n\r\n.wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 100px;\r\n\r\n  @media screen and (min-width: 1200px) {\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  &_btn {\r\n    text-align: center;\r\n\r\n    @media screen and (min-width: 768px) {\r\n      text-align: right;\r\n    }\r\n  }\r\n}\r\n\r\nfood-form::ng-deep {\r\n  width: 100%;\r\n  @media screen and (min-width: 1200px) {\r\n    width: calc(50% - 15px);\r\n    margin-right: 30px;\r\n  }\r\n}\r\n\r\nfood-orders-items::ng-deep {\r\n  width: 100%;\r\n  @media screen and (min-width: 1200px) {\r\n    width: calc(50% - 15px);\r\n  }\r\n}\r\n",
                    "styleUrl": "./order-form-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "orderHistoryService",
                        "type": "OrderHistoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "orderHistoryService",
                        "type": "OrderHistoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"layout\">\r\n  <div class=\"wrapper\">\r\n    <food-form #orderForm></food-form>\r\n    <food-orders-items\r\n      [foodItems]=\"orderList\"\r\n      [withShadow]=\"true\"\r\n    ></food-orders-items>\r\n  </div>\r\n  <div class=\"wrapper_btn\">\r\n    <food-button\r\n      [isDisabled]=\"isLoading\"\r\n      type=\"submit\"\r\n      (click)=\"submitHandler()\"\r\n      buttonText=\"Order\"\r\n      className=\"order\"\r\n    ></food-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "OrderHistoryPageComponent",
            "id": "component-OrderHistoryPageComponent-6e8b2295f3fb5c44c2d62c701a769be19c12dd3aa3b946fed1bf6cfde3a89e712ef061f3e01ae3b7f7d2d7199cb217df729fb24d5531c2c5cdd7cae99ec502e4",
            "file": "src/app/order-history-page/order-history-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-order-history-page",
            "styleUrls": [
                "./order-history-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-history-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-order-history-page',\r\n  templateUrl: './order-history-page.component.html',\r\n  styleUrls: ['./order-history-page.component.scss'],\r\n})\r\nexport class OrderHistoryPageComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./order-history-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"layout\">\r\n  <foods-orders-history-data></foods-orders-history-data>\r\n</div>\r\n"
        },
        {
            "name": "OrdersHistoryDataComponent",
            "id": "component-OrdersHistoryDataComponent-ffb38140d72415a409ebde24e363af9c4dcab4952ab45c045acd088682cd47ea2b437d4cfebddd26e86b67ccb984d073842c76cc147c9315ae3ed25b8c50b942",
            "file": "src/app/order-history-page/components/orders-history-data/orders-history-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "foods-orders-history-data",
            "styleUrls": [
                "./orders-history-data.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./orders-history-data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ordersHistory$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IOrderItemsHistory[]>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthsService } from 'src/app/service/auth.service';\r\nimport { OrderHistoryService } from 'src/app/service/order-history-service.service';\r\nimport { IOrderItemsHistory } from 'src/app/shared/types/types';\r\n\r\n@Component({\r\n  selector: 'foods-orders-history-data',\r\n  templateUrl: './orders-history-data.component.html',\r\n  styleUrls: ['./orders-history-data.component.scss'],\r\n})\r\nexport class OrdersHistoryDataComponent implements OnInit {\r\n  ordersHistory$: Observable<IOrderItemsHistory[]>;\r\n\r\n  constructor(\r\n    private orderHistoryService: OrderHistoryService,\r\n    private authsService: AuthsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.authsService.userId) {\r\n      this.ordersHistory$ = this.orderHistoryService.getHistoryOrderItem(\r\n        this.authsService.userId\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".adress-details {\r\n  width: 100%;\r\n}\r\n\r\nhr {\r\n  margin: 40px 0px;\r\n  background: var(--primary);\r\n\r\n  @media screen and (max-width: 768px) {\r\n    transform: rotate(180deg);\r\n    width: 100%;\r\n  }\r\n\r\n  @media screen and (min-width: 768px) {\r\n    margin: 0px 40px;\r\n  }\r\n\r\n  @media screen and (min-width: 1200px) {\r\n    margin: 0px 80px;\r\n  }\r\n}\r\n\r\n.details {\r\n  display: flex;\r\n  box-shadow: var(--boxShadow);\r\n  padding: 40px;\r\n  margin-bottom: 20px;\r\n  flex-direction: column;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    flex-direction: row;\r\n  }\r\n\r\n  li {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  h3 {\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n    line-height: 23px;\r\n    display: flex;\r\n    align-items: center;\r\n    color: var(--mainFont);\r\n  }\r\n\r\n  .title {\r\n    font-weight: 600;\r\n    font-size: 24px;\r\n    line-height: 28px;\r\n    color: var(--primary);\r\n  }\r\n\r\n  p {\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n    color: var(--borderColor);\r\n  }\r\n\r\n  .date {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    h3 {\r\n      font-weight: 600;\r\n      font-size: 24px;\r\n      line-height: 28px;\r\n      color: var(--primary);\r\n    }\r\n\r\n    p {\r\n      font-weight: 400;\r\n      font-size: 20px;\r\n      line-height: 23px;\r\n      color: var(--mainFont);\r\n    }\r\n  }\r\n}\r\n\r\nfood-orders-items::ng-deep,\r\n.user_data {\r\n  width: 100%;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: 50%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./orders-history-data.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "orderHistoryService",
                        "type": "OrderHistoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "orderHistoryService",
                        "type": "OrderHistoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul class=\"adress-details\">\r\n  <li *ngFor=\"let order of ordersHistory$ | async\" class=\"details\">\r\n    <div class=\"user_data\">\r\n      <h3 class=\"title\">Details:</h3>\r\n      <ul>\r\n        <li>\r\n          <h3>First and last name:</h3>\r\n          <p class=\"name\">{{ order.firstName }} {{ order.lastName }}</p>\r\n        </li>\r\n        <li>\r\n          <h3>Phone number:</h3>\r\n          <p class=\"phone\">{{ order.phone }}</p>\r\n        </li>\r\n        <li>\r\n          <h3>Adress:</h3>\r\n          <p class=\"adress\">{{ order.city }},  {{ order.street }}</p>\r\n        </li>\r\n      </ul>\r\n      <div class=\"date\">\r\n        <h3>Date:</h3>\r\n        <p>{{ order.date | date }}</p>\r\n      </div>\r\n    </div>\r\n    <hr />\r\n    <food-orders-items [foodItems]=\"order.foods\"></food-orders-items>\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "OrdersItemsComponent",
            "id": "component-OrdersItemsComponent-1eb4504f5a658353bce19a623ab5460610e11bd4bcae334c39fb95dfde2493963c3f856fd9919854ef652cb2244b8cc14cd3d2e8aac3b7692213c67e17b18b33",
            "file": "src/app/shared/modules/orders-items/orders-items.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-orders-items",
            "styleUrls": [
                "./orders-items.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./orders-items.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "foodItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "IOrdersHistoryItem[]",
                    "decorators": []
                },
                {
                    "name": "withShadow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CartServiceInterface>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CartService } from 'src/app/service/cart.service';\r\nimport { CartServiceInterface } from 'src/app/service/types';\r\nimport { IOrdersHistoryItem } from '../../types/types';\r\n\r\n@Component({\r\n  selector: 'food-orders-items',\r\n  templateUrl: './orders-items.component.html',\r\n  styleUrls: ['./orders-items.component.scss'],\r\n})\r\nexport class OrdersItemsComponent implements OnInit {\r\n  @Input() foodItems: IOrdersHistoryItem[] = [];\r\n  @Input() withShadow: boolean = false;\r\n\r\n  constructor(private cartService: CartService) {}\r\n\r\n  cart$: Observable<CartServiceInterface>;\r\n\r\n  ngOnInit(): void {\r\n    this.cart$ = this.cartService.getCartData();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "li {\r\n  border-bottom: dotted;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  color: var(--mainFont);\r\n\r\n  p {\r\n    margin: 5px;\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n    line-height: 23px;\r\n  }\r\n\r\n  p:first-child {\r\n    width: 150px;\r\n  }\r\n\r\n  p:last-child {\r\n    width: 30px;\r\n  }\r\n}\r\n\r\nh3 {\r\n  font-size: 24px;\r\n  line-height: 28px;\r\n  color: var(--primary);\r\n}\r\n\r\n.amount {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  h3 {\r\n    font-weight: 600;\r\n    font-size: 24px;\r\n    line-height: 28px;\r\n    color: var(--primary);\r\n  }\r\n\r\n  p {\r\n    font-weight: 400;\r\n    font-size: 20px;\r\n    line-height: 23px;\r\n    color: var(--mainFont);\r\n  }\r\n}\r\n\r\n.shadow {\r\n  box-shadow: var(--boxShadow);\r\n  padding: 20px 40px;\r\n  margin-top: 30px;\r\n\r\n  .amount p,\r\n  h3 {\r\n    font-size: 32px;\r\n    line-height: 38px;\r\n    color: var(--primary);\r\n  }\r\n}\r\n",
                    "styleUrl": "./orders-items.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [ngClass]=\"{ shadow: withShadow }\">\r\n  <h3>Order list:</h3>\r\n  <ul>\r\n    <li *ngFor=\"let el of foodItems\">\r\n      <p>{{ el.title }}</p>\r\n      <p>x{{ el.amount }}</p>\r\n      <p>{{ el.price }}$</p>\r\n    </li>\r\n  </ul>\r\n  <div class=\"amount\">\r\n    <h3>Amount:</h3>\r\n    <p>{{ (cart$ | async)?.total }}$</p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProductModalComponent",
            "id": "component-ProductModalComponent-45ffb27fba441eccf1c14a6bc6c94062eccf99411e98225cc78fe6c6467fc7e412fe423515a7c9e014a1b643ea34f84edf08bffc3e997032cfa2891954e6f743",
            "file": "src/app/shared/modules/product-modal/product-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-modal",
            "styleUrls": [
                "./product-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addingForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<IAddingForm>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ProductModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "{ category: any; img: any; price: any; title: any; }",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "imgUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeForm",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "img",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "price",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Drinks'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "img",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "price",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Drinks'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FoodInterface, IAddingForm } from '../../types/types';\r\nimport { FoodServiceService } from 'src/app/service/food-service.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { CustomValidators } from '../../validators/custom-validators';\r\n\r\n@Component({\r\n  selector: 'app-product-modal',\r\n  templateUrl: './product-modal.component.html',\r\n  styleUrls: ['./product-modal.component.scss'],\r\n})\r\nexport class ProductModalComponent implements OnInit {\r\n  addingForm: FormGroup<IAddingForm>;\r\n  submitted = false;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ProductModalComponent>,\r\n    private fb: FormBuilder,\r\n    private foodServiceService: FoodServiceService,\r\n    @Inject(MAT_DIALOG_DATA)\r\n    public data: { food: FoodInterface | undefined; type: 'edit' | 'add' },\r\n    private domSanitizer: DomSanitizer\r\n  ) {}\r\n\r\n  initializeForm(\r\n    title?: string,\r\n    img?: string,\r\n    price?: string,\r\n    category: string = 'Drinks'\r\n  ) {\r\n    this.addingForm = this.fb.group({\r\n      title: new FormControl<string>(title ?? '', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.minLength(3)],\r\n      }),\r\n      img: new FormControl<string>(img ?? '', {\r\n        nonNullable: true,\r\n        validators: [Validators.required],\r\n        asyncValidators: [CustomValidators.imageUrl()],\r\n      }),\r\n      price: new FormControl<string>(price ?? '', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.max(1000)],\r\n      }),\r\n      category: new FormControl<string>(category, {\r\n        nonNullable: true,\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let { title, img, price, category } = this.data.food ?? {};\r\n\r\n    if (category) {\r\n      category = category.charAt(0).toUpperCase() + category.slice(1);\r\n    }\r\n\r\n    this.initializeForm(title, img, `${price}`, category);\r\n  }\r\n\r\n  addProduct() {\r\n    if (!this.addingForm.valid) {\r\n      return;\r\n    } else {\r\n      const newProduct = this.getDataProduct();\r\n      this.foodServiceService.addFood(newProduct);\r\n      this.submitted = false;\r\n      this.dialogRef.close();\r\n    }\r\n  }\r\n\r\n  imgUrl(url: string) {\r\n    return this.domSanitizer.bypassSecurityTrustUrl(url);\r\n  }\r\n\r\n  getDataProduct() {\r\n    this.submitted = true;\r\n    let { category, price, title, img } = this.addingForm.value;\r\n    const product = {\r\n      category: category\r\n        ? category?.charAt(0).toLocaleLowerCase() + category?.slice(1)\r\n        : '',\r\n      img: img ? img : '',\r\n      price: price ? Number(price) : 0,\r\n      title: title ? title : '',\r\n    };\r\n    return product;\r\n  }\r\n\r\n  saveProduct() {\r\n    const id = this.data.food?.id;\r\n    if (!this.addingForm.valid || !id) {\r\n      return;\r\n    } else {\r\n      const updatedProduct = this.getDataProduct();\r\n      this.foodServiceService.updateFoodItem(id, updatedProduct);\r\n      this.submitted = false;\r\n      this.dialogRef.close({ ...updatedProduct, id });\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".close {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n}\r\n\r\nspan {\r\n  font-size: 40px;\r\n  color: var(--primary);\r\n  &:hover {\r\n    color: var(--secondary);\r\n  }\r\n}\r\n\r\n:host {\r\n  position: relative;\r\n}\r\n\r\n.form-control {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n\r\n  label {\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n    line-height: 23px;\r\n    color: var(--mainFont);\r\n  }\r\n}\r\n\r\n.preview {\r\n  max-height: 200px;\r\n  width: 200px;\r\n  object-fit: cover;\r\n}\r\n",
                    "styleUrl": "./product-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProductModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProductModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "foodServiceService",
                        "type": "FoodServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>{{ data.type === \"edit\" ? \"Edit product\" : \"Add new product\" }}</h2>\r\n<span class=\"material-symbols-sharp close\" (click)=\"close()\"> close </span>\r\n<form [formGroup]=\"addingForm\" autocomplete=\"off\" enctype=\"multipart/form-data\">\r\n  <food-input-form\r\n    label=\"Title\"\r\n    [control]=\"addingForm.controls.title\"\r\n  ></food-input-form>\r\n  <food-input-form\r\n    label=\"Price\"\r\n    [control]=\"addingForm.controls.price\"\r\n    [type]=\"'number'\"\r\n  ></food-input-form>\r\n  <div class=\"form-control\">\r\n    <label for=\"image\">Image</label>\r\n    <food-tab-component>\r\n      <food-single-tab tabTitle=\"Upload\">\r\n        <food-image-upload\r\n          formControlName=\"img\"\r\n          [control]=\"addingForm.controls.img\"\r\n        ></food-image-upload>\r\n      </food-single-tab>\r\n      <food-single-tab tabTitle=\"Url\">\r\n        <food-input-form\r\n          label=\"Image Url\"\r\n          [control]=\"addingForm.controls.img\"\r\n          [type]=\"'text'\"\r\n        ></food-input-form>\r\n      </food-single-tab>\r\n    </food-tab-component>\r\n    <img class=\"preview\" [src]=\"imgUrl(addingForm.value.img ?? '')\" />\r\n  </div>\r\n  <food-select-form\r\n    label=\"Category\"\r\n    [control]=\"addingForm.controls.category\"\r\n  ></food-select-form>\r\n  <food-button\r\n    [buttonText]=\"data.type === 'edit' ? 'Save' : 'Add product'\"\r\n    (click)=\"data.type === 'edit' ? saveProduct() : addProduct()\"\r\n    [disabled]=\"addingForm.invalid || submitted\"\r\n    [className]=\"'modalBtn'\"\r\n  ></food-button>\r\n</form>\r\n"
        },
        {
            "name": "RegisterPageComponent",
            "id": "component-RegisterPageComponent-3f7a4c98caa472ecb012cef06860f3d5250c8dfb2054e453a35c71e11cc3d020204029edd62da7957ad361b7d2110fac7075a2929501c121892d09dec2bd4b42",
            "file": "src/app/register-page/register-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-page",
            "styleUrls": [
                "./register-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isVisibleConfirmedPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isVisiblePassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "passwordSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<IFormGoupRegister>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showConfirnedPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { IFormGoupRegister } from '../shared/types/types';\r\nimport { Subscription } from 'rxjs';\r\nimport { CustomValidators } from '../shared/validators/custom-validators';\r\nimport { AuthsService } from '../service/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register-page',\r\n  templateUrl: './register-page.component.html',\r\n  styleUrls: ['./register-page.component.scss'],\r\n})\r\nexport class RegisterPageComponent implements OnInit, OnDestroy {\r\n  registerForm: FormGroup<IFormGoupRegister>;\r\n  passwordSubscription: Subscription;\r\n  isVisiblePassword: boolean = false;\r\n  isVisibleConfirmedPassword: boolean = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authsService: AuthsService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.fb.group({\r\n      email: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.email],\r\n      }),\r\n      password: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [Validators.required, Validators.minLength(6)],\r\n      }),\r\n      confirmPassword: new FormControl<string>('', {\r\n        nonNullable: true,\r\n        validators: [\r\n          Validators.required,\r\n          CustomValidators.compareWith('password'),\r\n        ],\r\n      }),\r\n    });\r\n\r\n    this.passwordSubscription =\r\n      this.registerForm.controls.password.valueChanges.subscribe(() => {\r\n        this.registerForm.controls.confirmPassword.updateValueAndValidity();\r\n      });\r\n  }\r\n\r\n  register() {\r\n    const { email, password } = this.registerForm.value;\r\n    if (email && password) {\r\n      this.authsService.signUp(email, password);\r\n    }\r\n  }\r\n\r\n  showPassword() {\r\n    this.isVisiblePassword = !this.isVisiblePassword;\r\n  }\r\n\r\n  showConfirnedPassword() {\r\n    this.isVisibleConfirmedPassword = !this.isVisibleConfirmedPassword;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.passwordSubscription.unsubscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-wrap {\r\n  position: relative;\r\n  span {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 50px;\r\n    width: 50px;\r\n    height: 50px;\r\n    z-index: 10;\r\n  }\r\n}\r\nform {\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  h2 {\r\n    text-align: center;\r\n    font-weight: 500;\r\n    font-size: 40px;\r\n    line-height: 47px;\r\n    color: var(--primary);\r\n  }\r\n}\r\nfood-button {\r\n  margin: 0 auto;\r\n}\r\n",
                    "styleUrl": "./register-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"layout\">\r\n  <form [formGroup]=\"registerForm\" autocomplete=\"off\">\r\n    <h2>Sign-up page</h2>\r\n    <food-input-form\r\n      label=\"Email\"\r\n      [control]=\"registerForm.controls.email\"\r\n    ></food-input-form>\r\n    <div class=\"input-wrap\">\r\n      <span (click)=\"showPassword()\" class=\"material-symbols-sharp\">{{\r\n        isVisiblePassword ? \"visibility\" : \"visibility_off\"\r\n      }}</span>\r\n      <food-input-form\r\n        label=\"Password\"\r\n        [control]=\"registerForm.controls.password\"\r\n        [type]=\"isVisiblePassword ? 'text' : 'password'\"\r\n      ></food-input-form>\r\n    </div>\r\n    <div class=\"input-wrap\">\r\n      <span (click)=\"showConfirnedPassword()\" class=\"material-symbols-sharp\">{{\r\n        isVisibleConfirmedPassword ? \"visibility\" : \"visibility_off\"\r\n      }}</span>\r\n      <food-input-form\r\n        label=\"Confirm password\"\r\n        [control]=\"registerForm.controls.confirmPassword\"\r\n        [type]=\"isVisibleConfirmedPassword ? 'text' : 'password'\"\r\n        autocomplete=\"off\"\r\n      >\r\n      </food-input-form>\r\n    </div>\r\n    <food-button\r\n      type=\"submit\"\r\n      (click)=\"register()\"\r\n      buttonText=\"Sign-up\"\r\n      className=\"auth\"\r\n    ></food-button>\r\n  </form>\r\n  <food-social-links></food-social-links>\r\n</div>\r\n"
        },
        {
            "name": "SelectFormComponent",
            "id": "component-SelectFormComponent-576c61c21a28de5c1878063a55dde26b378886e52dd06c57f9503a473b71813d26f38e6653925c5823dcf1f33f0eac8fcf9984b6fd2cebddaf758ffccab5c786",
            "file": "src/app/shared/modules/select-form/select-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-select-form",
            "styleUrls": [
                "./select-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "CATEGORIES.slice(1, CATEGORIES.length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { CATEGORIES } from '../../constants';\r\n\r\n@Component({\r\n  selector: 'food-select-form',\r\n  templateUrl: './select-form.component.html',\r\n  styleUrls: ['./select-form.component.scss'],\r\n})\r\nexport class SelectFormComponent implements OnInit {\r\n  categories = CATEGORIES.slice(1, CATEGORIES.length);\r\n  @Input()\r\n  control: FormControl = new FormControl();\r\n\r\n  @Input()\r\n  label: string = '';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  .mat-select {\r\n    border: 1px solid var(--primary);\r\n    height: 52px;\r\n    padding: 10px;\r\n    font-size: 24px;\r\n    line-height: 28px;\r\n    margin: 12px 0 20px;\r\n    border-radius: 5px;\r\n  }\r\n\r\n  mat-label {\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n    line-height: 23px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./select-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-label>{{ label }}</mat-label>\r\n<mat-select [formControl]=\"control\">\r\n  <mat-option *ngFor=\"let category of categories\" [value]=\"category\">\r\n    {{ category }}\r\n  </mat-option>\r\n</mat-select>\r\n"
        },
        {
            "name": "SidenavComponent",
            "id": "component-SidenavComponent-e524b2133b41bddc7226309d06e84388f9b951c981bab6fef2a9115d9a148608cdbb19aaba964ef4fde9e5e8bfa5b1db3ad2d319fd21e1fd4c2e9667fe8e8611",
            "file": "src/app/shared/modules/sidenav/sidenav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-sidenav",
            "styleUrls": [
                "./sidenav.component.scss",
                "./link.styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "navLinks",
                    "defaultValue": "navLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthsService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cartItemAmount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "sidenavService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidenavService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CartService } from 'src/app/service/cart.service';\r\nimport { SidenavService } from 'src/app/service/sidenav.service';\r\nimport { navLinks } from '../../constants';\r\nimport { AuthsService } from '../../../service/auth.service';\r\nimport { takeUntil, Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'food-sidenav',\r\n  templateUrl: './sidenav.component.html',\r\n  styleUrls: ['./sidenav.component.scss', './link.styles.scss'],\r\n})\r\nexport class SidenavComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  navLinks = navLinks;\r\n  cartItemAmount$: Observable<number>;\r\n  value: boolean = false;\r\n  destroyed$: Subject<boolean> = new Subject();\r\n\r\n  constructor(\r\n    private cartService: CartService,\r\n    public sidenavService: SidenavService,\r\n    public authsService: AuthsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.cartItemAmount$ = this.cartService.getCartItemAmount();\r\n    this.sidenavService.sidenav$\r\n      .pipe(takeUntil(this.destroyed$))\r\n      .subscribe((data) => {\r\n        this.value = data;\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".close {\r\n  color: var(--secondaryFont);\r\n}\r\np-sidebar::ng-deep > div {\r\n  background-color: var(--secondaryFont);\r\n  transition: transform 1s ease-in-out;\r\n  border: 1.5px solid var(--mainFont);\r\n}\r\n\r\n.shopping-cart-container {\r\n  position: relative;\r\n}\r\n.hide {\r\n  transform: translateX(100%);\r\n}\r\n\r\n.show {\r\n  transform: translateX(0);\r\n}\r\n\r\np-sidebar::ng-deep > div > div.p-sidebar-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./sidenav.component.scss"
                },
                {
                    "data": "span {\r\n  color: var(--mainFont);\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n\r\n  @media screen and (min-width: 480px) {\r\n    font-size: 32px;\r\n  }\r\n}\r\n\r\n.cart-amount {\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: var(--primary);\r\n  border-radius: 50%;\r\n  color: var(--white);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  position: absolute;\r\n  left: 20px;\r\n  bottom: 25px;\r\n}\r\n\r\n.link {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: var(--mainFont);\r\n  gap: 8px;\r\n\r\n  > p {\r\n    flex-basis: 3.5rem;\r\n  }\r\n\r\n  &:hover {\r\n    > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n    .shopping-cart-container > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n  }\r\n}\r\n\r\n.link-active {\r\n  > span,\r\n  p {\r\n    color: var(--secondary);\r\n    transition: var(--transition);\r\n  }\r\n}\r\n",
                    "styleUrl": "./link.styles.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p-sidebar [(visible)]=\"value\" position=\"right\">\r\n  <nav>\r\n    <ul class=\"side-nav-list\">\r\n      <li class=\"side-nav-item\">\r\n        <a\r\n          class=\"link\"\r\n          [routerLink]=\"this.navLinks.cart\"\r\n          [routerLinkActive]=\"['link-active']\"\r\n        >\r\n          \r\n          <p>Cart</p>\r\n          <div class=\"shopping-cart-container\">\r\n          <span class=\"material-symbols-outlined\">shopping_cart</span>\r\n          <div class=\"cart-amount\">{{ cartItemAmount$ | async }}</div>\r\n        </div>\r\n        </a>\r\n      </li>\r\n      <ng-container [ngSwitch]=\"(authsService.user$ | async)?.role\">\r\n        <food-user-links *ngSwitchCase=\"'client'\"></food-user-links>\r\n        <food-admin-links *ngSwitchCase=\"'admin'\"> </food-admin-links>\r\n        <food-unauthorized-links *ngSwitchDefault></food-unauthorized-links>\r\n      </ng-container>\r\n    </ul>\r\n  </nav>\r\n</p-sidebar>\r\n"
        },
        {
            "name": "SingleTabComponent",
            "id": "component-SingleTabComponent-4f593b794db3b8e25808788da5e56801c038a32178ea350624d50279e33b60fc637394e11fba05ad7373bb3c831895c73faa9639445814792b55027eec7a7360",
            "file": "src/app/shared/modules/tab-component/single-tab/single-tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-single-tab",
            "styleUrls": [
                "./single-tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./single-tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'food-single-tab',\r\n  templateUrl: './single-tab.component.html',\r\n  styleUrls: ['./single-tab.component.scss'],\r\n})\r\nexport class SingleTabComponent implements OnInit {\r\n  @Input('tabTitle') title: string;\r\n  @Input() active = false;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./single-tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [hidden]=\"!active\" class=\"pane\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "SocialLinksComponent",
            "id": "component-SocialLinksComponent-7a3594f348b48d1f62b9e58c812347f55618ba5f33b06cb726037859c94550812a658d5040e0e77f93a64e933459f3f2b65a2ad7426a0ea9d67bc1f26807bf01",
            "file": "src/app/shared/social-links/social-links.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-social-links",
            "styleUrls": [
                "./social-links.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./social-links.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthsService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthsService } from 'src/app/service/auth.service';\r\n\r\n@Component({\r\n  selector: 'food-social-links',\r\n  templateUrl: './social-links.component.html',\r\n  styleUrls: ['./social-links.component.scss'],\r\n})\r\nexport class SocialLinksComponent implements OnInit {\r\n  constructor(public authsService: AuthsService) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  &-icons {\r\n    display: flex;\r\n  }\r\n}\r\n.mat-icon::ng-deep {\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n}\r\n.mat-icon::ng-deep:not(:last-child) {\r\n  margin-right: 20px;\r\n}\r\nh2 {\r\n  color: var(--mainFont);\r\n}\r\n",
                    "styleUrl": "./social-links.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\r\n  <h2>Log in with social links:</h2>\r\n  <div class=\"wrapper_icons\">\r\n    <mat-icon svgIcon=\"facebook\" (click)=\"authsService.facebookAuth()\"></mat-icon>\r\n    <mat-icon svgIcon=\"github\" (click)=\"authsService.githubAuth()\"></mat-icon>\r\n    <mat-icon svgIcon=\"google\" (click)=\"authsService.googleAuth()\"></mat-icon>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-0120d4892ddfa7a07da94e1956ee4d42a2a8e42fc685240cb9a157b324921dbc16c4f50943ab05e26625962142caec04b2f1b16fc733144f097ce751b431dcfb",
            "file": "src/app/shared/modules/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "spinnerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpinnerService",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { SpinnerService } from '../../../service/spinner.service';\r\n\r\n@Component({\r\n  selector: 'spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss'],\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n  constructor(public spinnerService: SpinnerService) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#loader {\r\n  position: absolute;\r\n  height: 175px;\r\n  width: 175px;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n.backdrop {\r\n  z-index: 1000;\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0px;\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n#loader .dot {\r\n  bottom: 0;\r\n  height: 100%;\r\n  left: 0;\r\n  margin: auto;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 87.5px;\r\n}\r\n\r\n#loader .dot::before {\r\n  border-radius: 100%;\r\n  content: \"\";\r\n  height: 87.5px;\r\n  left: 0;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  transform: scale(0);\r\n  width: 87.5px;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 1) {\r\n  transform: rotate(45deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 1)::before {\r\n  animation: 0.8s linear 0.1s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 2) {\r\n  transform: rotate(90deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 2)::before {\r\n  animation: 0.8s linear 0.2s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 3) {\r\n  transform: rotate(135deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 3)::before {\r\n  animation: 0.8s linear 0.3s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 4) {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 4)::before {\r\n  animation: 0.8s linear 0.4s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 5) {\r\n  transform: rotate(225deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 5)::before {\r\n  animation: 0.8s linear 0.5s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 6) {\r\n  transform: rotate(270deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 6)::before {\r\n  animation: 0.8s linear 0.6s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 7) {\r\n  transform: rotate(315deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 7)::before {\r\n  animation: 0.8s linear 0.7s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .dot:nth-child(7n + 8) {\r\n  transform: rotate(360deg);\r\n}\r\n\r\n#loader .dot:nth-child(7n + 8)::before {\r\n  animation: 0.8s linear 0.8s normal none infinite running load;\r\n  background: var(--primary) none repeat scroll 0 0;\r\n}\r\n\r\n#loader .loading {\r\n  background-position: 50% 50%;\r\n  background-repeat: no-repeat;\r\n  bottom: -40px;\r\n  height: 20px;\r\n  left: 0;\r\n  position: absolute;\r\n  right: 0;\r\n  width: 180px;\r\n}\r\n\r\n@keyframes load {\r\n  100% {\r\n    opacity: 0;\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n@keyframes load {\r\n  100% {\r\n    opacity: 0;\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n.spinner-message {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "spinnerService",
                        "type": "SpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"spinnerService.spinner$ | async\">\r\n  <div class=\"backdrop\">\r\n    <div class=\"row\">\r\n      <div id=\"loader\">\r\n        <div class=\"dot\"></div>\r\n        <div class=\"dot\"></div>\r\n        <div class=\"dot\"></div>\r\n        <div class=\"dot\"></div>\r\n        <div class=\"dot\"></div>\r\n        <div class=\"dot\"></div>\r\n        <div class=\"dot\"></div>\r\n        <div class=\"dot\"></div>\r\n        <div class=\"loading\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TabComponentComponent",
            "id": "component-TabComponentComponent-0dcaf823859329905f10c679c7a16719bc1af1da46a4d01778b78766d29cf6d12781f9f648a365eef74c4264b15bf332c2ed2111ef40b1be01d83146c1a835ec",
            "file": "src/app/shared/modules/tab-component/tab-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-tab-component",
            "styleUrls": [
                "./tab-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SingleTabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SingleTabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "SingleTabComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "SingleTabComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport { SingleTabComponent } from './single-tab/single-tab.component';\r\n\r\n@Component({\r\n  selector: 'food-tab-component',\r\n  templateUrl: './tab-component.component.html',\r\n  styleUrls: ['./tab-component.component.scss'],\r\n})\r\nexport class TabComponentComponent implements AfterContentInit {\r\n  @ContentChildren(SingleTabComponent) tabs: QueryList<SingleTabComponent>;\r\n\r\n  constructor() {}\r\n\r\n  ngAfterContentInit() {\r\n    let activeTabs = this.tabs.filter((tab) => tab.active);\r\n\r\n    if (activeTabs.length === 0) {\r\n      this.selectTab(this.tabs.first);\r\n    }\r\n  }\r\n\r\n  selectTab(tab: SingleTabComponent) {\r\n    this.tabs.toArray().forEach((tab) => (tab.active = false));\r\n\r\n    tab.active = true;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 23px;\r\n  color: var(--mainFont);\r\n}\r\n\r\n.tabs {\r\n  display: flex;\r\n  gap: 0.25rem;\r\n}\r\n\r\n.tab {\r\n  width: 100%;\r\n  padding: 10px;\r\n  height: 52px;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  margin-top: 12px;\r\n\r\n  &__button {\r\n    all: unset;\r\n    vertical-align: middle;\r\n  }\r\n\r\n  border: 1px solid var(--primary);\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &.active {\r\n    background-color: var(--secondary);\r\n  }\r\n}\r\n",
                    "styleUrl": "./tab-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<ul class=\"tabs\">\r\n  <li\r\n    class=\"tab\"\r\n    *ngFor=\"let tab of tabs\"\r\n    (click)=\"selectTab(tab)\"\r\n    [class.active]=\"tab.active\"\r\n  >\r\n    <button class=\"tab__button\">{{ tab.title }}</button>\r\n  </li>\r\n</ul>\r\n<ng-content></ng-content>\r\n"
        },
        {
            "name": "UnauthorizedLinksComponent",
            "id": "component-UnauthorizedLinksComponent-fa2e0df38b1535e31b78123fcf02fb750d856469fb947b589050f2d2f803cbf81d58e909899533f18ca644ece544756b1460c7ee23fb9de48cc31a006405ea27",
            "file": "src/app/shared/modules/sidenav/unauthorized-links/unauthorized-links.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-unauthorized-links",
            "styleUrls": [
                "./unauthorized-links.component.scss",
                "../link.styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./unauthorized-links.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navLinks",
                    "defaultValue": "navLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { navLinks } from 'src/app/shared/constants';\r\n\r\n@Component({\r\n  selector: 'food-unauthorized-links',\r\n  templateUrl: './unauthorized-links.component.html',\r\n  styleUrls: ['./unauthorized-links.component.scss', '../link.styles.scss'],\r\n})\r\nexport class UnauthorizedLinksComponent {\r\n  navLinks = navLinks;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./unauthorized-links.component.scss"
                },
                {
                    "data": "span {\r\n  color: var(--mainFont);\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n\r\n  @media screen and (min-width: 480px) {\r\n    font-size: 32px;\r\n  }\r\n}\r\n\r\n.cart-amount {\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: var(--primary);\r\n  border-radius: 50%;\r\n  color: var(--white);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  position: absolute;\r\n  left: 20px;\r\n  bottom: 25px;\r\n}\r\n\r\n.link {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: var(--mainFont);\r\n  gap: 8px;\r\n\r\n  > p {\r\n    flex-basis: 3.5rem;\r\n  }\r\n\r\n  &:hover {\r\n    > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n    .shopping-cart-container > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n  }\r\n}\r\n\r\n.link-active {\r\n  > span,\r\n  p {\r\n    color: var(--secondary);\r\n    transition: var(--transition);\r\n  }\r\n}\r\n",
                    "styleUrl": "../link.styles.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<li>\r\n  <a\r\n    class=\"link\"\r\n    [routerLink]=\"this.navLinks.unathorized.login\"\r\n    [routerLinkActive]=\"['link-active']\"\r\n  >\r\n    <p>Log in</p>\r\n    <span class=\"material-symbols-outlined\">login</span>\r\n  </a>\r\n</li>\r\n<li>\r\n  <a\r\n    class=\"link\"\r\n    [routerLink]=\"this.navLinks.unathorized.signUp\"\r\n    [routerLinkActive]=\"['link-active']\"\r\n  >\r\n    <p>Sign up</p>\r\n    <span class=\"material-symbols-outlined\">how_to_reg</span>\r\n  </a>\r\n</li>\r\n"
        },
        {
            "name": "UserLinksComponent",
            "id": "component-UserLinksComponent-71d1072521847551a323c7c48e5c30083544db66b6f7ffb42225962d93c031bf080b7a3744133913671c88562bb62381cb3468846873caa73e90d7f192a62194",
            "file": "src/app/shared/modules/sidenav/user-links/user-links.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "food-user-links",
            "styleUrls": [
                "./user-links.component.scss",
                "../link.styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-links.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navLinks",
                    "defaultValue": "navLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { navLinks } from 'src/app/shared/constants';\r\nimport { AuthsService } from '../../../../service/auth.service';\r\n\r\n@Component({\r\n  selector: 'food-user-links',\r\n  templateUrl: './user-links.component.html',\r\n  styleUrls: ['./user-links.component.scss', '../link.styles.scss'],\r\n})\r\nexport class UserLinksComponent {\r\n  navLinks = navLinks;\r\n\r\n  constructor(private authsService: AuthsService) {}\r\n\r\n  logout() {\r\n    this.authsService.signOut();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-links.component.scss"
                },
                {
                    "data": "span {\r\n  color: var(--mainFont);\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n\r\n  @media screen and (min-width: 480px) {\r\n    font-size: 32px;\r\n  }\r\n}\r\n\r\n.cart-amount {\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: var(--primary);\r\n  border-radius: 50%;\r\n  color: var(--white);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  position: absolute;\r\n  left: 20px;\r\n  bottom: 25px;\r\n}\r\n\r\n.link {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: var(--mainFont);\r\n  gap: 8px;\r\n\r\n  > p {\r\n    flex-basis: 3.5rem;\r\n  }\r\n\r\n  &:hover {\r\n    > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n    .shopping-cart-container > span,\r\n    p {\r\n      color: var(--secondary);\r\n      transition: var(--transition);\r\n    }\r\n  }\r\n}\r\n\r\n.link-active {\r\n  > span,\r\n  p {\r\n    color: var(--secondary);\r\n    transition: var(--transition);\r\n  }\r\n}\r\n",
                    "styleUrl": "../link.styles.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authsService",
                        "type": "AuthsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<li>\r\n  <a\r\n    class=\"link\"\r\n    [routerLink]=\"navLinks.user.orderHistory\"\r\n    [routerLinkActive]=\"['link-active']\"\r\n  >\r\n    <p>Orders</p>\r\n    <span class=\"material-symbols-outlined\">receipt_long</span>\r\n  </a>\r\n</li>\r\n<li>\r\n  <a\r\n    class=\"link\"\r\n    [routerLink]=\"navLinks.user.profile\"\r\n    [routerLinkActive]=\"['link-active']\"\r\n  >\r\n    <p>Profile</p>\r\n    <span class=\"material-symbols-outlined\">account_circle</span>\r\n  </a>\r\n</li>\r\n<li>\r\n  <a class=\"link\" (click)=\"logout()\">\r\n    <p>Log out</p>\r\n    <span class=\"material-symbols-outlined\">logout</span>\r\n  </a>\r\n</li>\r\n"
        },
        {
            "name": "UserProfileComponent",
            "id": "component-UserProfileComponent-83289628d94abecb0ba2e103fcc878b08c649dab8f4cd10b70563d33cad097ade1f3a73cecc60226be8d1004bbb53bb6dce29e9ae3560c3cc0046c3be0f50b73",
            "file": "src/app/user-profile/user-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile",
            "styleUrls": [
                "./user-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrls: ['./user-profile.component.scss']\r\n})\r\nexport class UserProfileComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-profile works!</p>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-e0325eb676b37f28aa0e0ead648d45544bbeab509f5a9e9d3d97f32ca53f18b536e2d939c6116a299b735854c69f3f67e7ea43d1c3843e37b6d178ce0df9d087",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthGuard } from '../shared/guards/auth.guard';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n})\r\nexport class AdminModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-84f863496da306eb46b44aa34b34a0a32e7945b326a5f8abb1beb32d7321c1cd9efa3b91a50e8dca9006b3f20030a7632b5ba0987fdb99a80a1cc5099f614cc7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { AngularFireModule } from '@angular/fire/compat';\r\nimport { AngularFireAuthModule } from '@angular/fire/compat/auth';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { firebaseConfig } from 'src/environments/environment';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { CartPageModule } from './cart-page/cart-page.module';\r\nimport { LogInPageModule } from './log-in-page/log-in-page.module';\r\nimport { MainPageModule } from './main-page/main-page.module';\r\nimport { OrderFormPageModule } from './order-form-page/order-form-page.module';\r\nimport { OrderHistoryPageModule } from './order-history-page/order-history-page.module';\r\nimport { RegisterPageModule } from './register-page/register-page.module';\r\nimport { AuthsService } from './service/auth.service';\r\nimport { AuthInterceptor } from './shared/interceptors/auth.interceptor';\r\nimport { FooterModule } from './shared/modules/footer/footer/footer.module';\r\nimport { HeaderModule } from './shared/modules/header/header/header.module';\r\nimport { SidenavModule } from './shared/modules/sidenav/sidenav.module';\r\nimport { SpinnerModule } from './shared/modules/spinner/spinner.module';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    NoopAnimationsModule,\r\n    AppRoutingModule,\r\n    AngularFireModule.initializeApp(firebaseConfig),\r\n    AngularFireAuthModule,\r\n    FooterModule,\r\n    HeaderModule,\r\n    OrderFormPageModule,\r\n    MainPageModule,\r\n    OrderHistoryPageModule,\r\n    CartPageModule,\r\n    SpinnerModule,\r\n    LogInPageModule,\r\n    RegisterPageModule,\r\n    HttpClientModule,\r\n    SidenavModule,\r\n  ],\r\n  providers: [\r\n    AuthsService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      multi: true,\r\n      useClass: AuthInterceptor,\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "AuthsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CartPageModule"
                        },
                        {
                            "name": "FooterModule"
                        },
                        {
                            "name": "HeaderModule"
                        },
                        {
                            "name": "LogInPageModule"
                        },
                        {
                            "name": "MainPageModule"
                        },
                        {
                            "name": "OrderFormPageModule"
                        },
                        {
                            "name": "OrderHistoryPageModule"
                        },
                        {
                            "name": "RegisterPageModule"
                        },
                        {
                            "name": "SidenavModule"
                        },
                        {
                            "name": "SpinnerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f1fda736017e954ae52a2ba9f5dad4f8d16b40fc68b77f73fb17ea8b6efcfd487136f7fdd6c555640ca654c90a83be452e0289017bddf6de59e9a6adf6368dd7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainPageComponent } from './main-page/main-page.component';\r\nimport { AuthGuard } from './shared/guards/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    title: 'Home',\r\n    component: MainPageComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    title: 'Dashboard',\r\n    component: MainPageComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonsModule",
            "id": "module-ButtonsModule-a39398a35a68ef4056dc0b46b354566be2024a8304fc777d1aa27e3ac5a31c325f890832c28843d8cae220c88c43e5f4d6a0510eaf6efd85288c753684181bd6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { SpinnerModule } from '../spinner/spinner.module';\r\nimport { ButtonComponent } from './button.component';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n@NgModule({\r\n  declarations: [ButtonComponent],\r\n  imports: [CommonModule, SpinnerModule, ButtonModule],\r\n  exports: [ButtonComponent],\r\n})\r\nexport class ButtonsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SpinnerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardsModule",
            "id": "module-CardsModule-e2b963f8429a2c8d2c5ff89d57f4d108c5c50011445e906dc253ba5e5e0c86dabf5946e46301f4433edfd0a0568e06f2e0c61fbe072c2ff0615ea1355eccacd7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/card/card.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { ButtonsModule } from '../button/button.module';\r\nimport { CardItemComponent } from './card-item/card-item.component';\r\nimport { CardListComponent } from './card-list/card-list.component';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n@NgModule({\r\n  declarations: [CardItemComponent, CardListComponent],\r\n  imports: [CommonModule, ButtonsModule, MatSnackBarModule, ButtonModule],\r\n  exports: [CardItemComponent, CardListComponent],\r\n})\r\nexport class CardsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardItemComponent"
                        },
                        {
                            "name": "CardListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardItemComponent"
                        },
                        {
                            "name": "CardListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartPageModule",
            "id": "module-CartPageModule-bd2abbed64bcb2857e5d73b7ee8a8e2a43fe3ba0070b069624242c9095dba194fde92492a8c68d69c462333610335327a21a55500cdf7c339578b680c5ac5424",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/cart-page/cart-page.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ButtonsModule } from '../shared/modules/button/button.module';\r\nimport { CardsModule } from '../shared/modules/card/card.module';\r\nimport { CartPageComponent } from './cart-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'cart',\r\n    title: 'Cart',\r\n    component: CartPageComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [CartPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    CardsModule,\r\n    ButtonsModule,\r\n  ],\r\n})\r\nexport class CartPageModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CartPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CardsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FooterModule",
            "id": "module-FooterModule-a89d1a1677987a4085c09d8a79ae267d7a3cfac079349ed11397df6b355007259c941e473b5242e1b19b84d9b792c3a51e8f8f468a1e4da2f29de493e884dcbc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/footer/footer/footer.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FooterComponent } from './footer.component';\r\n\r\n@NgModule({\r\n  declarations: [FooterComponent],\r\n  imports: [CommonModule],\r\n  exports: [FooterComponent],\r\n})\r\nexport class FooterModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderModule",
            "id": "module-HeaderModule-26b16681e77531d2e46337fe639931726fca43a7f296ac2568b2efa01bef91d5d517803a83d436231f403f62acf2a09ca893bbef6f3b7b4cb38204297a1dd87f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/header/header/header.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HeaderComponent } from './header.component';\r\n\r\n@NgModule({\r\n  declarations: [HeaderComponent],\r\n  imports: [CommonModule, RouterModule, BrowserAnimationsModule],\r\n  exports: [HeaderComponent],\r\n})\r\nexport class HeaderModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconRegistryModule",
            "id": "module-IconRegistryModule-a8dc952e224b3ddc57b699056c1098deb129bfa2a101dbfc931a2ce954e91ec392d8ec2bb478e3a02e1f44a6618630c3cdcfe59b45dfd485d7f99b06b0da5249",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/icon-registry/icon-registry.module.ts",
            "methods": [
                {
                    "name": "registerIcons",
                    "args": [
                        {
                            "name": "icons",
                            "type": "IIcons[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "icons",
                            "type": "IIcons[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { IIcons } from '../../types/types';\nimport { icons } from '../../constants';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n})\nexport class IconRegistryModule {\n  iconsSvg: IIcons[] = icons;\n  constructor(\n    private matIconRegistry: MatIconRegistry,\n    private domSanitizer: DomSanitizer\n  ) {\n    this.registerIcons(this.iconsSvg);\n  }\n\n  registerIcons(icons: IIcons[]) {\n    icons.forEach((icon) => {\n      this.matIconRegistry.addSvgIcon(\n        icon.name,\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.src)\n      );\n    });\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ImageUploadModule",
            "id": "module-ImageUploadModule-5de204bf1b7a4c736c12a9e73a94c428ba33fb5ddc8dfe14297dfb971b863acfb842209d8521d076763528a4a54eb47e05ae1f4a6023660d5b0fc5ae9db9da01",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/image-upload/image-upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ImageUploadComponent } from './image-upload.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [ImageUploadComponent],\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\r\n  exports: [ImageUploadComponent],\r\n})\r\nexport class ImageUploadModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ImageUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ImageUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputFormModule",
            "id": "module-InputFormModule-7582668ae3e95d0777db3fa2593c6c56f3b670647694ff40b012aff0a15642b22eab51790afc263151a461f5d88aac55b04b13eea558dcb15a7a3395c255b6f5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/input-form/input-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InputFormComponent } from './input-form.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [InputFormComponent],\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\r\n  exports: [InputFormComponent],\r\n})\r\nexport class InputFormModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LogInPageModule",
            "id": "module-LogInPageModule-6f37dcae24e3d356606812edce331c52a42468ca247211b61ce13c30f598bcdf002cdfcf64ee7a491da18d79dc7924cfe07d95c11b935b6b1c4864c6a4528796",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/log-in-page/log-in-page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { InputFormModule } from '../shared/modules/input-form/input-form.module';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { LogInPageComponent } from './log-in-page.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ButtonsModule } from '../shared/modules/button/button.module';\r\nimport { SocialLinksModule } from '../shared/social-links/social-links.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'login',\r\n    title: 'Login Form',\r\n    component: LogInPageComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [LogInPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    InputFormModule,\r\n    RouterModule.forChild(routes),\r\n    ButtonsModule,\r\n    SocialLinksModule,\r\n  ],\r\n})\r\nexport class LogInPageModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LogInPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "InputFormModule"
                        },
                        {
                            "name": "SocialLinksModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainPageModule",
            "id": "module-MainPageModule-bf7967d565f7a43dc35dfdfea56edd8643e0ed1be0b79c80b94aac126de28a74b522422b1861a73f7ff0bf0ad21ba19f6858346741cc385cf4096182d2a16772",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main-page/main-page.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ButtonsModule } from '../shared/modules/button/button.module';\r\nimport { CardsModule } from '../shared/modules/card/card.module';\r\nimport { CategoriesComponent } from './components/categories/categories.component';\r\nimport { HeroComponent } from './components/hero/hero.component';\r\nimport { InfiniteScrollComponent } from './components/infinite-scroll/infinite-scroll.component';\r\nimport { MainPageComponent } from './main-page.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { ProductModalModule } from '../shared/modules/product-modal/product-modal.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MainPageComponent,\r\n    HeroComponent,\r\n    CategoriesComponent,\r\n    InfiniteScrollComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    CardsModule,\r\n    ButtonsModule,\r\n    MatDialogModule,\r\n    ProductModalModule,\r\n  ],\r\n  exports: [ButtonsModule, InfiniteScrollComponent],\r\n})\r\nexport class MainPageModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CategoriesComponent"
                        },
                        {
                            "name": "HeroComponent"
                        },
                        {
                            "name": "InfiniteScrollComponent"
                        },
                        {
                            "name": "MainPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CardsModule"
                        },
                        {
                            "name": "ProductModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "InfiniteScrollComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrderFormPageModule",
            "id": "module-OrderFormPageModule-a06f9661f17c8489744285b0c196029baf522ccce28c6dd27074c85e1e97c01451dfb34f0e713f457438b684f7dd4bcf563adf1744b1ae2d81ba2d3f93461a9d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/order-form-page/order-form-page.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { InputFormModule } from '../shared/modules/input-form/input-form.module';\r\nimport { ButtonsModule } from '../shared/modules/button/button.module';\r\nimport { OrdersItemsModule } from '../shared/modules/orders-items/orders-items.module';\r\nimport { FormComponent } from './components/form/form.component';\r\nimport { OrderFormPageComponent } from './order-form-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'order-form',\r\n    title: 'Order Form',\r\n    component: OrderFormPageComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [FormComponent, OrderFormPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    OrdersItemsModule,\r\n    ButtonsModule,\r\n    InputFormModule,\r\n  ],\r\n  exports: [OrderFormPageComponent],\r\n})\r\nexport class OrderFormPageModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "OrderFormPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "InputFormModule"
                        },
                        {
                            "name": "OrdersItemsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OrderFormPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrderHistoryPageModule",
            "id": "module-OrderHistoryPageModule-ba69217f44429a9480432557754be314693a4f26725c762a6deba91109779b99f46838099183fb0fe3ca05bcee15b16803ccc3b789527325fddc987c26b89e4b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/order-history-page/order-history-page.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { OrdersItemsModule } from '../shared/modules/orders-items/orders-items.module';\r\nimport { OrdersHistoryDataComponent } from './components/orders-history-data/orders-history-data.component';\r\nimport { OrderHistoryPageComponent } from './order-history-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'order-history',\r\n    title: 'History of orders',\r\n    component: OrderHistoryPageComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [OrderHistoryPageComponent, OrdersHistoryDataComponent],\r\n  imports: [CommonModule, RouterModule.forChild(routes), OrdersItemsModule],\r\n})\r\nexport class OrderHistoryPageModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OrderHistoryPageComponent"
                        },
                        {
                            "name": "OrdersHistoryDataComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "OrdersItemsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrdersItemsModule",
            "id": "module-OrdersItemsModule-e3c5009dee976affb10b66891badee67a464071a65f646ef95fc327f91ab5ca1b3ade5c6ebed5843ad68c490eb177d0a39f3e7433dd172a4e5d30f07ef2f203c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/orders-items/orders-items.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { OrdersItemsComponent } from './orders-items.component';\r\n\r\n@NgModule({\r\n  declarations: [OrdersItemsComponent],\r\n  imports: [CommonModule],\r\n  exports: [OrdersItemsComponent],\r\n})\r\nexport class OrdersItemsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OrdersItemsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OrdersItemsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductModalModule",
            "id": "module-ProductModalModule-384fe1e5f38b72412a689257f36f6659ea542aa177a5dc13b9abf0075b448386843a02c185e7ff463a7d64332c7d32255604e6c58b821d46851161eda6d37af8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/product-modal/product-modal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProductModalComponent } from './product-modal.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { InputFormModule } from '../input-form/input-form.module';\r\nimport { SelectFormModule } from '../select-form/select-form.module';\r\nimport { ButtonsModule } from '../button/button.module';\r\nimport { ImageUploadModule } from '../image-upload/image-upload.module';\r\nimport { TabComponentModule } from '../tab-component/tab-component.module';\r\n\r\n@NgModule({\r\n  declarations: [ProductModalComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    InputFormModule,\r\n    SelectFormModule,\r\n    ButtonsModule,\r\n    ImageUploadModule,\r\n    TabComponentModule,\r\n  ],\r\n})\r\nexport class ProductModalModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProductModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ImageUploadModule"
                        },
                        {
                            "name": "InputFormModule"
                        },
                        {
                            "name": "SelectFormModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegisterPageModule",
            "id": "module-RegisterPageModule-556b0dedf8eb86217f53ff2d007d7efb17b8424e4b4db6c1889a916d969bb98eb24fca79da1317964f456a3695d4fb38f00dde2940baed8e64d2f8571c16e5da",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/register-page/register-page.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegisterPageComponent } from './register-page.component';\r\nimport { ButtonsModule } from '../shared/modules/button/button.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { InputFormModule } from '../shared/modules/input-form/input-form.module';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SocialLinksModule } from '../shared/social-links/social-links.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'sign-up',\r\n    title: 'Sign-up Page',\r\n    component: RegisterPageComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [RegisterPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    InputFormModule,\r\n    RouterModule.forChild(routes),\r\n    ButtonsModule,\r\n    SocialLinksModule,\r\n  ],\r\n})\r\nexport class RegisterPageModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegisterPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "InputFormModule"
                        },
                        {
                            "name": "SocialLinksModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectFormModule",
            "id": "module-SelectFormModule-2fa79ee36b5c621af314197b6f50d0c9b770f416c5b09757e3afb4459ed036d9a563438fb27b05d65fa0bf1d69ec80c17924b24d0f964534fbffb108716448bd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/select-form/select-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SelectFormComponent } from './select-form.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@NgModule({\r\n  declarations: [SelectFormComponent],\r\n  imports: [CommonModule, MatSelectModule, ReactiveFormsModule, FormsModule],\r\n  exports: [SelectFormComponent],\r\n})\r\nexport class SelectFormModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidenavModule",
            "id": "module-SidenavModule-73663b23b11f788ef7a82ce345586b8497fcdaf60e8c6930176cdfa56eff779ce127c5824b9f93f7bf61a2dcfb6eb4976af3d1a1c709c1532563a98e8c233e61",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/sidenav/sidenav.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SidenavComponent } from './sidenav.component';\r\nimport { UnauthorizedLinksComponent } from './unauthorized-links/unauthorized-links.component';\r\nimport { UserLinksComponent } from './user-links/user-links.component';\r\nimport { AdminLinksComponent } from './admin-links/admin-links.component';\r\nimport { OutsideClickDirective } from '../../directives/click-outside';\r\nimport {SidebarModule} from 'primeng/sidebar';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SidenavComponent,\r\n    UnauthorizedLinksComponent,\r\n    UserLinksComponent,\r\n    AdminLinksComponent,\r\n    OutsideClickDirective,\r\n  ],\r\n  imports: [CommonModule, RouterModule, SidebarModule],\r\n  exports: [SidenavComponent],\r\n})\r\nexport class SidenavModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminLinksComponent"
                        },
                        {
                            "name": "OutsideClickDirective"
                        },
                        {
                            "name": "SidenavComponent"
                        },
                        {
                            "name": "UnauthorizedLinksComponent"
                        },
                        {
                            "name": "UserLinksComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidenavComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SocialLinksModule",
            "id": "module-SocialLinksModule-9c43cdf34714e5a9d28fe2b7284ffda3b96288e01fc109398fb7cc0ed48de937902f35f6d94465e3a0f5424eb5d5a0d01aae899ce47abd8a3e9857894afc0d29",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/social-links/social-links.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SocialLinksComponent } from './social-links.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [SocialLinksComponent],\r\n  imports: [CommonModule, MatIconModule],\r\n  exports: [SocialLinksComponent],\r\n})\r\nexport class SocialLinksModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SocialLinksComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SocialLinksComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpinnerModule",
            "id": "module-SpinnerModule-2facc9832c2af68e23dd4d4b966e95f63196524f0a9b28ba2e17f11b07ab871e0ee3b98fc5025726b64751526fb43bc6ee2fc70c5fbb5938405d6779259b5a93",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/spinner/spinner.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ButtonSpinnerComponent } from './button-spinner/button-spinner.component';\r\nimport { SpinnerComponent } from './spinner.component';\r\n\r\n@NgModule({\r\n  declarations: [SpinnerComponent, ButtonSpinnerComponent],\r\n  imports: [CommonModule],\r\n  exports: [SpinnerComponent, ButtonSpinnerComponent],\r\n})\r\nexport class SpinnerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonSpinnerComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonSpinnerComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabComponentModule",
            "id": "module-TabComponentModule-a49b89631a6f98bfdf91d5c464061f1904ed810d0074c24f2cb2008f79af429d27f9d7f62997bceee40bb699dc2ad430812aac1ed548f15d5c845cbe0b9c20d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/tab-component/tab-component.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TabComponentComponent } from './tab-component.component';\r\nimport { SingleTabComponent } from './single-tab/single-tab.component';\r\n\r\n@NgModule({\r\n  declarations: [TabComponentComponent, SingleTabComponent],\r\n  imports: [CommonModule],\r\n  exports: [TabComponentComponent, SingleTabComponent],\r\n})\r\nexport class TabComponentModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SingleTabComponent"
                        },
                        {
                            "name": "TabComponentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SingleTabComponent"
                        },
                        {
                            "name": "TabComponentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserProfileModule",
            "id": "module-UserProfileModule-59cfc8abb9ce5993ab73e766ab0d5ee4dfef75373e578f9e4746bb51b11e7ba74e1f8596919b9f285ee307a58375559002ebdd547c9015a4015731c5a0d2c41b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/user-profile/user-profile.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserProfileComponent } from './user-profile.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UserProfileComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class UserProfileModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "calculateTotal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/cart.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(items: FoodWithAmountInterface[]) => {\r\n  return items.reduce((acc, item) => (acc += item.amount * item.price), 0);\r\n}"
            },
            {
                "name": "CardStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/CardComponent.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CartMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  items: [\r\n    {\r\n      category: 'pizza',\r\n      img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n      price: 90,\r\n      title: 'Seafood pizza',\r\n      amount: 1,\r\n      id: '12',\r\n      type: 'added',\r\n    },\r\n  ],\r\n  total: 1,\r\n}"
            },
            {
                "name": "CATEGORIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\r\n  'All',\r\n  'Pizza',\r\n  'Sushi',\r\n  'Drinks',\r\n  'Noodles',\r\n  'Salads',\r\n]"
            },
            {
                "name": "city",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Mr. Fox'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_FETCH_LIMIT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "3"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "firebaseConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiKey: 'AIzaSyDgcq6QbdRTqwo9roZWy5rDTXkWFyze8Ts',\r\n  authDomain: 'foodapp-5f221.firebaseapp.com',\r\n  projectId: 'foodapp-5f221',\r\n  storageBucket: 'foodapp-5f221.appspot.com',\r\n  messagingSenderId: '921449123814',\r\n  appId: '1:921449123814:web:9ef8e4d2feb365c2e75027',\r\n  measurementId: 'G-H1Y112VNJG',\r\n}"
            },
            {
                "name": "firstName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Bong'"
            },
            {
                "name": "FoodItemsWithAmountMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    category: 'pizza',\r\n    img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n    price: 10,\r\n    title: 'Seafood pizza',\r\n    amount: 2,\r\n    id: '1',\r\n    type: 'added',\r\n  },\r\n  {\r\n    category: 'pizza',\r\n    img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n    price: 20,\r\n    title: 'Seafood pizza',\r\n    amount: 1,\r\n    id: '2',\r\n    type: 'added',\r\n  },\r\n]"
            },
            {
                "name": "FoodItemWithAmountMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  category: 'pizza',\r\n  img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n  price: 90,\r\n  title: 'Seafood pizza',\r\n  amount: 1,\r\n  id: '2',\r\n  type: 'added',\r\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  firstName,\r\n  lastName,\r\n  phone,\r\n  city,\r\n  street,\r\n}"
            },
            {
                "name": "generateErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/form.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  controlErrors: ValidationErrors | null,\r\n  key: string\r\n) => {\r\n  const errors: Record<string, string> = {\r\n    required: 'The field is required',\r\n    minlength: `The minimum length for this field is ${controlErrors?.['minlength']?.requiredLength}`,\r\n    pattern: 'The field is not valid',\r\n    match: 'Field Password and Confirm Password must to be equal',\r\n    email: 'Invalid email address',\r\n    imgUrl: 'Invalid image url',\r\n    max: `Cannot be greater than ${controlErrors?.['max']?.max}`,\r\n  };\r\n  return errors[key];\r\n}"
            },
            {
                "name": "icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IIcons[]",
                "defaultValue": "[\r\n  { name: 'facebook', src: '../assets/icons/icon-facebook.svg' },\r\n  { name: 'github', src: '../assets/icons/icon-github.svg' },\r\n  { name: 'google', src: '../assets/icons/icon-google.svg' },\r\n]"
            },
            {
                "name": "ItemForHistoryOrderMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  city: '44444444',\r\n  date: 'Jan 10, 2023',\r\n  firstName: 'ssss',\r\n  lastName: 'sssssssss',\r\n  phone: '444444444444',\r\n  street: '44444444',\r\n  foods: [\r\n    {\r\n      amount: 1,\r\n      category: 'drinks',\r\n      id: 'LFS3GlIPuaPcny0zRxiW',\r\n      img: 'https://stylesatlife.com/wp-content/uploads/2020/01/black-coffee-benefits.jpg',\r\n      price: 10,\r\n      title: 'Black Coffee',\r\n      type: 'added',\r\n    },\r\n    {\r\n      amount: 1,\r\n      category: 'pizza',\r\n      id: 'U3fUK1HxUuvIEz4V7SCe',\r\n      img: 'https://kitchenatics.com/wp-content/uploads/2020/09/Cheese-pizza-1.jpg',\r\n      price: 12,\r\n      title: 'Cheese pizza',\r\n      type: 'added',\r\n    },\r\n  ],\r\n}"
            },
            {
                "name": "ItemHistoryDataMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    city: '44444444',\r\n    date: 'Jan 10, 2023',\r\n    firstName: 'ssss',\r\n    lastName: 'sssssssss',\r\n    phone: '444444444444',\r\n    street: '44444444',\r\n    foods: [\r\n      {\r\n        amount: 1,\r\n        category: 'drinks',\r\n        id: 'LFS3GlIPuaPcny0zRxiW',\r\n        img: 'https://stylesatlife.com/wp-content/uploads/2020/01/black-coffee-benefits.jpg',\r\n        price: 10,\r\n        title: 'Black Coffee',\r\n        type: 'added',\r\n      },\r\n      {\r\n        amount: 1,\r\n        category: 'pizza',\r\n        id: 'U3fUK1HxUuvIEz4V7SCe',\r\n        img: 'https://kitchenatics.com/wp-content/uploads/2020/09/Cheese-pizza-1.jpg',\r\n        price: 12,\r\n        title: 'Cheese pizza',\r\n        type: 'added',\r\n      },\r\n    ],\r\n  },\r\n]"
            },
            {
                "name": "lastName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'Johnson'"
            },
            {
                "name": "LoginPageStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/LoginPage.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "navLinks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  cart: 'cart',\r\n  unathorized: {\r\n    signUp: 'sign-up',\r\n    login: 'login',\r\n  },\r\n  user: userLinks,\r\n  admin: {\r\n    ...userLinks,\r\n    dashboard: 'dashboard',\r\n  },\r\n}"
            },
            {
                "name": "phone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'123123123123'"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "street",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/testing-moks/testing-mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'HEllo 123'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/CardComponent.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({ props: args })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/LoginPage.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({ props: args })"
            },
            {
                "name": "THEMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/config/theme.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ITHEMES",
                "defaultValue": "{\r\n  default: {\r\n    primary: '#64748B',\r\n    secondary: '#a8b8cf',\r\n    secondaryShadow: '#350e42',\r\n    error: 'red',\r\n    mainFont: '#252525',\r\n    white: '#ffffff',\r\n    secondaryFont: '#ffffff',\r\n    background: 'rgba(255, 255, 255, 0.8)',\r\n    borderColor: '#747474',\r\n    boxShadow:\r\n      '0px 2px 1px rgb(0 0 0 / 20%), 0px 1px 1px rgb(0 0 0 / 14%),0px 1px 3px rgb(0 0 0 / 12%)',\r\n    transition: '500ms ease-in-out',\r\n  },\r\n  dark: {\r\n    primary: '#64748B',\r\n    secondary: '#a8b8cf',\r\n    secondaryShadow: '#350e42',\r\n    error: 'red',\r\n    mainFont: 'white',\r\n    white: '#ffffff',\r\n    secondaryFont: '#252525',\r\n    background: 'rgba(255, 255, 255, 0.8)',\r\n    borderColor: '#747474',\r\n    boxShadow: 'inset 2px 2px 5px rgb(213 213 213), 1px 1px 5px #64748B',\r\n    transition: '500ms ease-in-out',\r\n  },\r\n}"
            },
            {
                "name": "userLinks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  orderHistory: 'order-history',\r\n  logout: 'logout',\r\n  profile: 'profile',\r\n}"
            },
            {
                "name": "validateAllFormFields",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/form.helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(formGroup: FormGroup) => {\r\n  Object.keys(formGroup.controls).forEach((field) => {\r\n    const control = formGroup.get(field);\r\n    if (control instanceof FormControl) {\r\n      control?.markAsTouched({ onlySelf: true });\r\n    } else if (control instanceof FormGroup) {\r\n      validateAllFormFields(control);\r\n    }\r\n  });\r\n}"
            }
        ],
        "functions": [
            {
                "name": "findElementByTestId",
                "file": "src/app/shared/helpers/testing-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "testId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DebugElement",
                "jsdoctags": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "testId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getByText",
                "file": "src/app/shared/helpers/testing-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tagName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "queryByCss",
                "file": "src/app/shared/helpers/testing-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selector",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DebugElement",
                "jsdoctags": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selector",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "testIdSelector",
                "file": "src/app/shared/helpers/testing-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "testId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "testId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "LocalStorageKeys",
                "childs": [
                    {
                        "name": "cart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cart"
                    },
                    {
                        "name": "category",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "category"
                    },
                    {
                        "name": "sort",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort"
                    },
                    {
                        "name": "theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "theme"
                    },
                    {
                        "name": "userId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "userId"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/service/types.ts"
            },
            {
                "name": "UserRole",
                "childs": [
                    {
                        "name": "client",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "client"
                    },
                    {
                        "name": "admin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "admin"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/types/types.ts"
            }
        ],
        "groupedVariables": {
            "src/app/shared/helpers/cart.helpers.ts": [
                {
                    "name": "calculateTotal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/cart.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(items: FoodWithAmountInterface[]) => {\r\n  return items.reduce((acc, item) => (acc += item.amount * item.price), 0);\r\n}"
                }
            ],
            "src/stories/CardComponent.stories.ts": [
                {
                    "name": "CardStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/CardComponent.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/CardComponent.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({ props: args })"
                }
            ],
            "src/app/shared/testing-moks/testing-mocks.ts": [
                {
                    "name": "CartMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  items: [\r\n    {\r\n      category: 'pizza',\r\n      img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n      price: 90,\r\n      title: 'Seafood pizza',\r\n      amount: 1,\r\n      id: '12',\r\n      type: 'added',\r\n    },\r\n  ],\r\n  total: 1,\r\n}"
                },
                {
                    "name": "city",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Mr. Fox'"
                },
                {
                    "name": "firstName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Bong'"
                },
                {
                    "name": "FoodItemsWithAmountMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    category: 'pizza',\r\n    img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n    price: 10,\r\n    title: 'Seafood pizza',\r\n    amount: 2,\r\n    id: '1',\r\n    type: 'added',\r\n  },\r\n  {\r\n    category: 'pizza',\r\n    img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n    price: 20,\r\n    title: 'Seafood pizza',\r\n    amount: 1,\r\n    id: '2',\r\n    type: 'added',\r\n  },\r\n]"
                },
                {
                    "name": "FoodItemWithAmountMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  category: 'pizza',\r\n  img: 'https://kfoods.com/images1/newrecipeicon/seafood-pizza_4999.jpg',\r\n  price: 90,\r\n  title: 'Seafood pizza',\r\n  amount: 1,\r\n  id: '2',\r\n  type: 'added',\r\n}"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  firstName,\r\n  lastName,\r\n  phone,\r\n  city,\r\n  street,\r\n}"
                },
                {
                    "name": "ItemForHistoryOrderMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  city: '44444444',\r\n  date: 'Jan 10, 2023',\r\n  firstName: 'ssss',\r\n  lastName: 'sssssssss',\r\n  phone: '444444444444',\r\n  street: '44444444',\r\n  foods: [\r\n    {\r\n      amount: 1,\r\n      category: 'drinks',\r\n      id: 'LFS3GlIPuaPcny0zRxiW',\r\n      img: 'https://stylesatlife.com/wp-content/uploads/2020/01/black-coffee-benefits.jpg',\r\n      price: 10,\r\n      title: 'Black Coffee',\r\n      type: 'added',\r\n    },\r\n    {\r\n      amount: 1,\r\n      category: 'pizza',\r\n      id: 'U3fUK1HxUuvIEz4V7SCe',\r\n      img: 'https://kitchenatics.com/wp-content/uploads/2020/09/Cheese-pizza-1.jpg',\r\n      price: 12,\r\n      title: 'Cheese pizza',\r\n      type: 'added',\r\n    },\r\n  ],\r\n}"
                },
                {
                    "name": "ItemHistoryDataMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    city: '44444444',\r\n    date: 'Jan 10, 2023',\r\n    firstName: 'ssss',\r\n    lastName: 'sssssssss',\r\n    phone: '444444444444',\r\n    street: '44444444',\r\n    foods: [\r\n      {\r\n        amount: 1,\r\n        category: 'drinks',\r\n        id: 'LFS3GlIPuaPcny0zRxiW',\r\n        img: 'https://stylesatlife.com/wp-content/uploads/2020/01/black-coffee-benefits.jpg',\r\n        price: 10,\r\n        title: 'Black Coffee',\r\n        type: 'added',\r\n      },\r\n      {\r\n        amount: 1,\r\n        category: 'pizza',\r\n        id: 'U3fUK1HxUuvIEz4V7SCe',\r\n        img: 'https://kitchenatics.com/wp-content/uploads/2020/09/Cheese-pizza-1.jpg',\r\n        price: 12,\r\n        title: 'Cheese pizza',\r\n        type: 'added',\r\n      },\r\n    ],\r\n  },\r\n]"
                },
                {
                    "name": "lastName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'Johnson'"
                },
                {
                    "name": "phone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'123123123123'"
                },
                {
                    "name": "street",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/testing-moks/testing-mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'HEllo 123'"
                }
            ],
            "src/app/shared/constants.ts": [
                {
                    "name": "CATEGORIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\r\n  'All',\r\n  'Pizza',\r\n  'Sushi',\r\n  'Drinks',\r\n  'Noodles',\r\n  'Salads',\r\n]"
                },
                {
                    "name": "DEFAULT_FETCH_LIMIT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "3"
                },
                {
                    "name": "icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcons[]",
                    "defaultValue": "[\r\n  { name: 'facebook', src: '../assets/icons/icon-facebook.svg' },\r\n  { name: 'github', src: '../assets/icons/icon-github.svg' },\r\n  { name: 'google', src: '../assets/icons/icon-google.svg' },\r\n]"
                },
                {
                    "name": "navLinks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  cart: 'cart',\r\n  unathorized: {\r\n    signUp: 'sign-up',\r\n    login: 'login',\r\n  },\r\n  user: userLinks,\r\n  admin: {\r\n    ...userLinks,\r\n    dashboard: 'dashboard',\r\n  },\r\n}"
                },
                {
                    "name": "userLinks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  orderHistory: 'order-history',\r\n  logout: 'logout',\r\n  profile: 'profile',\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                },
                {
                    "name": "firebaseConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiKey: 'AIzaSyDgcq6QbdRTqwo9roZWy5rDTXkWFyze8Ts',\r\n  authDomain: 'foodapp-5f221.firebaseapp.com',\r\n  projectId: 'foodapp-5f221',\r\n  storageBucket: 'foodapp-5f221.appspot.com',\r\n  messagingSenderId: '921449123814',\r\n  appId: '1:921449123814:web:9ef8e4d2feb365c2e75027',\r\n  measurementId: 'G-H1Y112VNJG',\r\n}"
                }
            ],
            "src/app/shared/helpers/form.helpers.ts": [
                {
                    "name": "generateErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/form.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  controlErrors: ValidationErrors | null,\r\n  key: string\r\n) => {\r\n  const errors: Record<string, string> = {\r\n    required: 'The field is required',\r\n    minlength: `The minimum length for this field is ${controlErrors?.['minlength']?.requiredLength}`,\r\n    pattern: 'The field is not valid',\r\n    match: 'Field Password and Confirm Password must to be equal',\r\n    email: 'Invalid email address',\r\n    imgUrl: 'Invalid image url',\r\n    max: `Cannot be greater than ${controlErrors?.['max']?.max}`,\r\n  };\r\n  return errors[key];\r\n}"
                },
                {
                    "name": "validateAllFormFields",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/form.helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(formGroup: FormGroup) => {\r\n  Object.keys(formGroup.controls).forEach((field) => {\r\n    const control = formGroup.get(field);\r\n    if (control instanceof FormControl) {\r\n      control?.markAsTouched({ onlySelf: true });\r\n    } else if (control instanceof FormGroup) {\r\n      validateAllFormFields(control);\r\n    }\r\n  });\r\n}"
                }
            ],
            "src/stories/LoginPage.stories.ts": [
                {
                    "name": "LoginPageStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/LoginPage.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/LoginPage.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({ props: args })"
                }
            ],
            "src/app/shared/config/theme.config.ts": [
                {
                    "name": "THEMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/config/theme.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITHEMES",
                    "defaultValue": "{\r\n  default: {\r\n    primary: '#64748B',\r\n    secondary: '#a8b8cf',\r\n    secondaryShadow: '#350e42',\r\n    error: 'red',\r\n    mainFont: '#252525',\r\n    white: '#ffffff',\r\n    secondaryFont: '#ffffff',\r\n    background: 'rgba(255, 255, 255, 0.8)',\r\n    borderColor: '#747474',\r\n    boxShadow:\r\n      '0px 2px 1px rgb(0 0 0 / 20%), 0px 1px 1px rgb(0 0 0 / 14%),0px 1px 3px rgb(0 0 0 / 12%)',\r\n    transition: '500ms ease-in-out',\r\n  },\r\n  dark: {\r\n    primary: '#64748B',\r\n    secondary: '#a8b8cf',\r\n    secondaryShadow: '#350e42',\r\n    error: 'red',\r\n    mainFont: 'white',\r\n    white: '#ffffff',\r\n    secondaryFont: '#252525',\r\n    background: 'rgba(255, 255, 255, 0.8)',\r\n    borderColor: '#747474',\r\n    boxShadow: 'inset 2px 2px 5px rgb(213 213 213), 1px 1px 5px #64748B',\r\n    transition: '500ms ease-in-out',\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/helpers/testing-helpers.ts": [
                {
                    "name": "findElementByTestId",
                    "file": "src/app/shared/helpers/testing-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fixture",
                            "type": "ComponentFixture",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "testId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DebugElement",
                    "jsdoctags": [
                        {
                            "name": "fixture",
                            "type": "ComponentFixture",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "testId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByText",
                    "file": "src/app/shared/helpers/testing-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fixture",
                            "type": "ComponentFixture",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tagName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fixture",
                            "type": "ComponentFixture",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tagName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "queryByCss",
                    "file": "src/app/shared/helpers/testing-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fixture",
                            "type": "ComponentFixture",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DebugElement",
                    "jsdoctags": [
                        {
                            "name": "fixture",
                            "type": "ComponentFixture",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testIdSelector",
                    "file": "src/app/shared/helpers/testing-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "testId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "testId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/service/types.ts": [
                {
                    "name": "LocalStorageKeys",
                    "childs": [
                        {
                            "name": "cart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cart"
                        },
                        {
                            "name": "category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "category"
                        },
                        {
                            "name": "sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort"
                        },
                        {
                            "name": "theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "theme"
                        },
                        {
                            "name": "userId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "userId"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/service/types.ts"
                }
            ],
            "src/app/shared/types/types.ts": [
                {
                    "name": "UserRole",
                    "childs": [
                        {
                            "name": "client",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "client"
                        },
                        {
                            "name": "admin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "admin"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/types/types.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "title": "Home",
                        "component": "MainPageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "dashboard",
                        "title": "Dashboard",
                        "component": "MainPageComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/cart-page/cart-page.module.ts",
                "module": "CartPageModule",
                "children": [
                    {
                        "path": "cart",
                        "title": "Cart",
                        "component": "CartPageComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/log-in-page/log-in-page.module.ts",
                "module": "LogInPageModule",
                "children": [
                    {
                        "path": "login",
                        "title": "LoginForm",
                        "component": "LogInPageComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/order-form-page/order-form-page.module.ts",
                "module": "OrderFormPageModule",
                "children": [
                    {
                        "path": "order-form",
                        "title": "OrderForm",
                        "component": "OrderFormPageComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/order-history-page/order-history-page.module.ts",
                "module": "OrderHistoryPageModule",
                "children": [
                    {
                        "path": "order-history",
                        "title": "Historyoforders",
                        "component": "OrderHistoryPageComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/register-page/register-page.module.ts",
                "module": "RegisterPageModule",
                "children": [
                    {
                        "path": "sign-up",
                        "title": "Sign-upPage",
                        "component": "RegisterPageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/cart-page/cart-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/log-in-page/log-in-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogInPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/main-page/components/categories/categories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/main-page/components/hero/hero.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeroComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main-page/components/infinite-scroll/infinite-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfiniteScrollComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/main-page/main-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/order-form-page/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/order-form-page/order-form-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/order-history-page/components/orders-history-data/orders-history-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrdersHistoryDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/order-history-page/order-history-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderHistoryPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/register-page/register-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/service/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthsService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/service/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/service/food-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FoodServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/service/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/order-history-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderHistoryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/sidenav.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SidenavService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/spinner.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpinnerService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/service/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartServiceInterface",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/config/theme.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CATEGORIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_FETCH_LIMIT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navLinks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userLinks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/click-outside.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OutsideClickDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/cart.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "calculateTotal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/form.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "generateErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/form.helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateAllFormFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/testing-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "findElementByTestId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/testing-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getByText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/testing-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "queryByCss",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/testing-helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "testIdSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/card/card-item/card-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/card/card-list/card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/footer/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/header/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/header/header/header.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AnimateThemeChangeElements",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/image-upload/image-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/input-form/input-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/orders-items/orders-items.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrdersItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/product-modal/product-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/select-form/select-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/sidenav/admin-links/admin-links.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminLinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/sidenav/sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/sidenav/unauthorized-links/unauthorized-links.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UnauthorizedLinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/sidenav/user-links/user-links.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserLinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/spinner/button-spinner/button-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tab-component/single-tab/single-tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SingleTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tab-component/tab-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/social-links/social-links.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SocialLinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CartMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "city",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firstName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FoodItemsWithAmountMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FoodItemWithAmountMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ItemForHistoryOrderMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ItemHistoryDataMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lastName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "phone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/testing-moks/testing-mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "street",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FoodFilterInterface",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FoodInterface",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FoodInterfaceInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FoodWithAmountInterface",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormGoupInterface",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddingForm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IForm",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormGoupLogin",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormGoupRegister",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIcons",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOrderItemsHistory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOrdersHistoryItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheme",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITHEMES",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/custom-validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomValidators",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user-profile/user-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/CardComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CardStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/CardComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/LoginPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoginPageStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/LoginPage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}